I'm making an application called communiqueue. its a email and texting template tool where users will come and create templates that take in data on my website and then use my API to send email and text messages by passing me data and I'll built the content.

Users log in and create projects. Each project contains containers. a project contains a default container. the container can contain other containers like a windows folder structure. Inside of these contains are templates. Templates are the things the user will update and manage and these can be stored at any level of containers the user creates for organizational purposes.

My site is built using nuxt 3 Typescript composition api built as SSG and tailwind css as my UI library. Below is my tailwind config and theme:
import type { Config } from 'tailwindcss'

export default <Partial<Config>>{
  content: [],
  darkMode: 'class',
  theme: {
    extend: {
      maxWidth: {
        '8xl': '90rem',
      },
      colors: {
        // Light theme colors
        light: {
          textbase: '#333333', // Dark gray for main text
          background: '#f8fafc', // Very light blue-gray for background
          surface: '#ffffff', // White for surface elements
          primary: '#3b82f6', // Bright blue for primary actions
          secondary: '#64748b', // Slate blue for secondary elements
          accent: '#06b6d4', // Cyan for accents and highlights
          error: '#ef4444', // Red for errors
          info: '#0ea5e9', // Sky blue for informational messages
          success: '#22c55e', // Green for success messages
          warning: '#f59e0b', // Amber for warnings
        },
        // Dark theme colors
        dark: {
          textbase: '#e2e8f0', // Light gray for main text
          background: '#0f172a', // Very dark blue for background
          surface: '#1e293b', // Dark blue-gray for surface elements
          primary: '#60a5fa', // Lighter blue for primary actions
          secondary: '#94a3b8', // Light slate blue for secondary elements
          accent: '#22d3ee', // Bright cyan for accents
          error: '#f87171', // Light red for errors
          info: '#38bdf8', // Bright sky blue for info
          success: '#4ade80', // Bright green for success
          warning: '#fbbf24', // Bright amber for warnings
        },
      },
    },
  },
}

i've also included my nuxt config and package.json so you know what packages i have available to me.
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({

  modules: [
    '@nuxt/eslint',
    '@nuxt/ui',
    '@nuxt/icon',
    '@nuxt/fonts',
    '@logto/nuxt',
    '@nuxtjs/color-mode',
    'nuxt-headlessui',
    '@hebilicious/vue-query-nuxt',
    '@logto/nuxt',
    '@nuxt/scripts',
    '@nuxtjs/seo',
    '@vueuse/nuxt',
  ],

  devtools: {
    enabled: true,
    timeline: {
      enabled: true,
    },
  },

  app: {
    pageTransition: { name: 'page', mode: 'out-in' },
    layoutTransition: { name: 'layout', mode: 'out-in' },
    head: {
      titleTemplate: '%s | CommuniQueue',
      meta: [
        { name: 'viewport', content: 'width=device-width, initial-scale=1' },
      ],
    },
  },

  css: ['~/assets/css/main.css'],

  site: {
    url: process.env.NUXT_SITE_URL,
    name: process.env.NUXT_SITE_NAME,
    description:
      'Streamline communication with template management and messaging API. Create and send personalized emails. Custom organization for businesses and individuals.',
    defaultLocale: 'en',
    debug: process.env.NUXT_SITE_ENV !== 'production',
  },

  colorMode: {
    classSuffix: '',
  },

  runtimeConfig: {
    public: {
      scripts: {
        cloudflareWebAnalytics: {
          // NUXT_PUBLIC_SCRIPTS_CLOUDFLARE_WEB_ANALYTICS_TOKEN=<your-token>
          token: '',
        },
        googleAnalytics: {
          // NUXT_PUBLIC_SCRIPTS_GOOGLE_ANALYTICS_ID=<your-id>
          id: '',
        },
        clarity: {
          // NUXT_PUBLIC_SCRIPTS_CLARITY_ID=<your-id>
          id: '',
        },
      },
    },
    logto: {
      endpoint: 'https://LocalAuth.battlelineproductions.com/',
      appId: '',
      appSecret: '',
      cookieEncryptionKey: '',
    },
  },

  future: {
    compatibilityVersion: 4,
  },

  compatibilityDate: '2024-11-01',

  postcss: {
    plugins: {
      '@tailwindcss/postcss': {},
    },
  },

  eslint: {
    config: {
      stylistic: true,
    },
  },

  headlessui: {
    prefix: 'Headless',
  },

  ogImage: {
    enabled: false,
  },

  schemaOrg: {
    identity: {
      type: 'Organization',
      name: 'Battleline Productions',
      url: process.env.NUXT_SITE_URL,
      logo: '/battle_logo_small.png',
    },
  },

  scripts: {
    registry: {
      googleAnalytics: true,
      clarity: true,
    },
  },

  // for productioin only scripts
  // $production: {
  //   scripts: {
  //     registry: {
  //       cloudflareWebAnalytics: true,
  //       googleAnalytics: true,
  //       clarity: true,
  //     },
  //   },
  // },
})
{
  "name": "communiqueue",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare",
    "lint": "eslint .",
    "lint:fix": "eslint --fix ."
  },
  "dependencies": {
    "@headlessui/tailwindcss": "^0.2.1",
    "@headlessui/vue": "^1.7.23",
    "@hebilicious/vue-query-nuxt": "0.3.0",
    "@logto/nuxt": "^1.1.5",
    "@nuxt/eslint": "0.7.4",
    "@nuxt/fonts": "0.10.3",
    "@nuxt/icon": "1.10.3",
    "@nuxt/scripts": "0.9.5",
    "@nuxt/ui": "3.0.0-alpha.10",
    "@nuxtjs/color-mode": "3.5.2",
    "@nuxtjs/seo": "2.0.2",
    "@tailwindcss/postcss": "4.0.0-beta.8",
    "@tanstack/vue-query": "^5.62.9",
    "@vueuse/nuxt": "12.2.0",
    "nuxt": "^3.15.0",
    "tailwindcss": "4.0.0-beta.8",
    "vue": "latest"
  },
  "packageManager": "pnpm@9.15.1",
  "devDependencies": {
    "@nuxt/eslint-config": "^0.7.4",
    "eslint": "^9.17.0",
    "nuxt-headlessui": "^1.2.0",
    "sass": "^1.83.0",
    "sass-loader": "^16.0.4",
    "serverless": "^4.4.18",
    "serverless-cf-invalidate-proxy": "^1.0.1",
    "serverless-domain-manager": "^8.0.0",
    "serverless-plugin-common-excludes": "^4.0.0",
    "serverless-s3-sync": "^3.4.0",
    "typescript": "^5.7.2"
  }
}

=== app.vue ===
<script lang="ts" setup>
provideHeadlessUseId(() => useId())
</script>

<template>
  <UApp>
    <Body class="antialiased duration-300 transition-colors text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-950">
      <NuxtLayout>
        <NuxtLoadingIndicator />
        <NuxtPage />
      </NuxtLayout>
    </Body>
  </UApp>
</template>


=== components\ActionSheet\Group.vue ===
<template>
  <div
    class="rounded-lg backdrop-blur-lg bg-gray-400/[0.5] dark:bg-gray-700/[0.5] flex flex-col divide-y divide-gray-400 dark:divide-gray-700"
  >
    <slot />
  </div>
</template>


=== components\ActionSheet\Header.vue ===
<template>
  <div class="py-2">
    <slot />
  </div>
</template>


=== components\ActionSheet\HeaderMessage.vue ===
<script lang="ts" setup>
defineProps({
  text: {
    type: String,
    default: '',
  },
})
</script>

<template>
  <div class="text-xs text-center text-gray-700 dark:text-gray-500">
    <slot>
      <span>{{ text }}</span>
    </slot>
  </div>
</template>


=== components\ActionSheet\HeaderTitle.vue ===
<script lang="ts" setup>
defineProps({
  text: {
    type: String,
    default: '',
  },
})
</script>

<template>
  <div class="text-xs font-bold text-center text-gray-800 dark:text-gray-400">
    <slot>
      <span>{{ text }}</span>
    </slot>
  </div>
</template>


=== components\ActionSheet\index.vue ===
<script lang="ts" setup>
const emit = defineEmits<{
  (e: 'close', event: MouseEvent): void
}>()

defineProps({
  closeButton: {
    type: Boolean,
    default: true,
  },
  closeButtonText: {
    type: String,
    default: 'Cancel',
  },
})

const isShow = ref(false)

const close = (e: MouseEvent) => {
  isShow.value = false
  setTimeout(() => emit('close', e), 300)
}

const onCloseComponentClick = (e: MouseEvent) => {
  const acceptedClasses = ['action-sheet', 'action-sheet-container']
  const target = e.target as HTMLElement
  const targetClassList = target.classList
  for (const acceptedClass of acceptedClasses) {
    if (targetClassList.contains(acceptedClass)) {
      close(e)
      break
    }
  }
}

onMounted(() => {
  isShow.value = true
})
</script>

<template>
  <Teleport to="body">
    <HeadlessTransitionRoot
      :show="isShow"
      class="action-sheet fixed z-50 top-0 left-0 w-screen h-screen max-h-screen max-w-full flex flex-col justify-end bg-black/[0.5]"
      enter="transition-opacity duration-300"
      enter-from="opacity-0"
      enter-to="opacity-100"
      leave="transition-opacity duration-300"
      leave-from="opacity-100"
      leave-to="opacity-0"
      @click="onCloseComponentClick"
    >
      <div class="flex flex-col overflow-hidden relative">
        <div class="action-sheet-container flex-1 overflow-y-auto space-y-1 justify-end px-4 pb-2 pt-4">
          <slot />
          <ActionSheetGroup v-if="closeButton">
            <ActionSheetItemButton
              class="text-red-500 font-bold"
              :text="closeButtonText"
              @click="close"
            />
          </ActionSheetGroup>
        </div>
      </div>
    </HeadlessTransitionRoot>
  </Teleport>
</template>


=== components\ActionSheet\Item.vue ===
<template>
  <div class="px-4 py-2">
    <slot />
  </div>
</template>


=== components\ActionSheet\ItemButton.vue ===
<script lang="ts" setup>
defineProps({
  text: {
    type: String,
    default: '',
  },
})
</script>

<template>
  <div
    class="px-4 py-2 text-center flex items-center justify-center active:bg-gray-700/[0.5] hover:bg-gray-700/[0.5]"
  >
    <slot>
      <span>{{ text }}</span>
    </slot>
  </div>
</template>


=== components\AlertBanner.vue ===
<script lang="ts" setup>
import { TransitionRoot, TransitionChild } from '@headlessui/vue'

export type IStyles = 'primary' | 'success' | 'warning' | 'danger'

// props
const props = defineProps({
  title: {
    type: String,
    default: undefined,
  },
  text: {
    type: String,
    default: undefined,
  },
  type: {
    type: String,
    default: 'primary',
  },
})

// styles
const styles = reactive<{
  [key: string]: string
}>({
  primary: '',
  success: 'dark:from-green-500/50 via-gray-200 to-gray-200 dark:via-gray-900 dark:to-gray-900',
  warning: 'dark:from-yellow-500/50 via-gray-200 to-gray-200 dark:via-gray-900 dark:to-gray-900',
  danger: 'dark:from-red-500/50 via-gray-200 to-gray-200 dark:via-gray-900 dark:to-gray-900',
})
const textStyles = reactive<{
  [key: string]: string
}>({
  primary: 'text-black dark:text-white',
  success: 'text-green-500',
  warning: 'text-orange-500',
  danger: 'text-red-500',
})

// selected
const isDestroyed = ref<boolean>(false)
const selectedType = computed<IStyles>((): IStyles => {
  if (['primary', 'success', 'warning', 'danger'].includes(props.type)) return props.type as IStyles
  return 'primary'
})
const selectedStyle = computed(() => styles[selectedType.value])
const selectedTextStyle = computed(() => textStyles[selectedType.value])

// actions
const close = () => {
  isDestroyed.value = true
}
</script>

<template>
  <TransitionRoot
    :show="!isDestroyed"
    appear
  >
    <TransitionChild
      as="template"
      enter="duration-300 ease-out"
      enter-from="opacity-0"
      enter-to="opacity-100"
      leave="duration-300 ease-in"
      leave-from="opacity-100"
      leave-to="opacity-0"
    >
      <div
        :class="`bg-gray-200 dark:bg-gray-800 bg-gradient-to-r shadow-white/50 dark:shadow-gray-950/50 px-6 py-6 rounded-md shadow-lg flex space-x-6 ${selectedStyle}`"
      >
        <div class="flex items-center justify-center">
          <slot name="icon">
            <Icon
              v-if="selectedType === 'success'"
              name="mdi:check-circle"
              :class="`text-2xl ${selectedTextStyle}`"
            />
            <Icon
              v-if="selectedType === 'danger'"
              name="icon-clarity:times-circle-solid"
              :class="`text-2xl ${selectedTextStyle}`"
            />
            <Icon
              v-if="selectedType === 'warning'"
              name="icon-bi:exclamation-circle-fill"
              :class="`text-2xl ${selectedTextStyle}`"
            />
          </slot>
        </div>
        <div class="flex-1">
          <div :class="`font-bold text-lg mb-0.5 ${selectedTextStyle}`">
            <slot name="title">
              {{ props.title }}
            </slot>
          </div>
          <div class="text-gray-700 dark:text-gray-100">
            <slot name="title">
              {{ props.text }}
            </slot>
          </div>
        </div>
        <div>
          <button
            class="text-gray-600 hover:text-red-500 dark:text-gray-400 font-bold"
            @click="close"
          >
            <Icon name="clarity:times-line" />
          </button>
        </div>
      </div>
    </TransitionChild>
  </TransitionRoot>
</template>


=== components\BL\Button\index.vue ===
<script lang="ts" setup>
const props = defineProps({
  text: {
    type: String,
    default: '',
  },
  type: {
    type: String,
    default: 'primary',
  },
  size: {
    type: String,
    default: 'md',
  },
  to: {
    type: [String, Object],
    default: undefined,
  },
  href: {
    type: String,
    default: undefined,
  },
})
// state:styles
const defaultStyle = `
  cursor-pointer
  border transition-color duration-300
  focus:outline-none focus:ring-1 focus:ring-offset-1 focus:dark:ring-offset-gray-50 focus:dark:ring-gray-400 focus:ring-gray-600/[0.6] focus:ring-offset-gray-800/[0.6]
  flex items-center justify-center font-semibold
`
const styles = reactive<{
  [key: string]: string
}>({
  none: '',
  primary: 'text-white bg-primary-500 hover:bg-primary-400 border-primary-500',
  secondary: 'text-gray-800 bg-gray-200 border-gray-200 hover:bg-gray-300 dark:text-white dark:border-gray-800 dark:bg-gray-800 dark:hover:bg-gray-700',
  opposite:
        'text-white bg-gray-800 hover:bg-white hover:text-gray-800 hover:border-gray-900 dark:text-gray-800 dark:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:border-white',
  danger: 'text-white bg-red-500 hover:bg-red-400 border-red-500',
})
const sizes = reactive<{
  [key: string]: string
}>({
  lg: 'h-14 px-8 text-lg rounded-lg',
  md: 'h-10 px-6 text-base rounded',
  sm: 'h-9 px-4 text-sm rounded',
  xs: 'h-6 px-3 text-xs rounded',
})
// state
const selectedStyle = computed(() => (props.type in styles ? styles[props.type] : styles.primary))
const selectedSize = computed(() => sizes[props.size] || sizes.lg)
// methods
const onClick = (event: MouseEvent) => {
  const router = useRouter()
  if (props.to) {
    router.push(props.to)
  }
  if (!props.href) {
    event.preventDefault()
  }
}
</script>

<template>
  <NuxtLink
    v-if="to"
    tag="a"
    :to="to"
    :class="`${defaultStyle} ${selectedStyle} ${selectedSize}`"
  >
    <slot>{{ text }}</slot>
  </NuxtLink>
  <a
    v-else
    :class="`${defaultStyle} ${selectedStyle} ${selectedSize}`"
    :href="href"
    @click="onClick"
  >
    <slot>{{ text }}</slot>
  </a>
</template>


=== components\BL\Link\index.vue ===
<script lang="ts" setup>
import { toRef } from 'vue'

// micro compiler
const props = defineProps({
  text: {
    type: String,
    default: '',
  },
  to: {
    type: [String, Object],
    default: undefined,
  },
  href: {
    type: String,
    default: '',
  },
})
// state
const href = toRef(props, 'href')
const to = toRef(props, 'to')
</script>

<template>
  <NuxtLink
    v-if="to"
    tag="a"
    :to="to"
    :class="`transition-colors duration-300 dark:hover:text-white hover:text-gray-900 hover:underline`"
  >
    <slot>{{ text }}</slot>
  </NuxtLink>
  <a
    v-else-if="!href"
    :class="`transition-colors duration-300 dark:hover:text-white hover:text-gray-900 hover:underline`"
    href="#"
  >
    <slot>{{ text }}</slot>
  </a>
  <a
    v-else
    :class="`transition-colors duration-300 dark:hover:text-white hover:text-gray-900 hover:underline`"
    :href="href"
  >
    <slot>{{ text }}</slot>
  </a>
</template>


=== components\Card\Content.vue ===
<template>
  <div class="card-content px-6 py-6 relative">
    <slot />
  </div>
</template>


=== components\Card\Footer.vue ===
<template>
  <div
    class="card-footer duration-300 transition-colors px-6 py-2 text-sm bg-white dark:bg-gray-950 border-t border-gray-950/10 dark:border-gray-50/[0.2]"
  >
    <slot />
  </div>
</template>


=== components\Card\index.vue ===
<script lang="ts" setup>
defineProps({
  disabled: {
    type: Boolean,
    required: false,
  },
})
</script>

<template>
  <div
    class="card duration-300 transition-colors w-full relative rounded overflow-hidden bg-white dark:bg-gray-950 border border-gray-950/10 dark:border-gray-50/[0.2]"
  >
    <div
      v-if="disabled"
      class="absolute z-10 top-0 left-0 w-full h-full bg-gray-900/[0.75] cursor-not-allowed"
    />
    <slot />
  </div>
</template>


=== components\Card\Title.vue ===
<script lang="ts" setup>
defineProps({
  text: {
    type: String,
    default: '',
  },
})
</script>

<template>
  <div class="text-xl font-semibold mb-2">
    <slot>{{ text }}</slot>
  </div>
</template>


=== components\ConfirmationModal.vue ===
<script setup lang="ts">
withDefaults(
  defineProps<{
    title: string
    message: string
    confirmText?: string
    cancelText?: string
    processingText?: string
    isProcessing?: boolean
    variant?: 'danger' | 'primary'
  }>(),
  {
    confirmText: 'Confirm',
    cancelText: 'Cancel',
    processingText: 'Processing...',
    isProcessing: false,
    variant: 'primary',
  },
)

defineEmits<{
  cancel: []
  confirm: []
}>()
</script>

<template>
  <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg max-w-sm w-full">
      <h2 class="text-lg font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
        {{ title }}
      </h2>
      <p class="text-sm text-light-secondary dark:text-dark-secondary mb-6">
        {{ message }}
      </p>
      <div class="flex justify-end space-x-2">
        <button
          class="px-4 py-2 text-light-secondary dark:text-dark-secondary hover:underline"
          :disabled="isProcessing"
          @click="$emit('cancel')"
        >
          {{ cancelText }}
        </button>
        <button
          :disabled="isProcessing"
          :class="[
            'text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity disabled:opacity-50',
            variant === 'danger' ? 'bg-light-error dark:bg-dark-error' : 'bg-light-primary dark:bg-dark-primary',
          ]"
          @click="$emit('confirm')"
        >
          {{ isProcessing ? processingText : confirmText }}
        </button>
      </div>
    </div>
  </div>
</template>


=== components\Dashboard\Access\index.vue ===
<template>
  <div class="space-y-6">
    <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg shadow-sm">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-light-textbase dark:text-dark-textbase">
          Team Members
        </h2>
        <button
          v-if="canManageUsers"
          class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity"
          @click="showInviteModal = true"
        >
          Invite Member
        </button>
      </div>

      <div
        v-if="isLoading"
        class="py-8 text-center text-light-secondary dark:text-dark-secondary"
      >
        <LoadingSpinner />
      </div>

      <div
        v-else-if="projectUsers?.length === 0"
        class="text-center py-8"
      >
        <Icon
          name="mdi:account-group-outline"
          class="w-16 h-16 mx-auto text-light-secondary dark:text-dark-secondary mb-2"
        />
        <p class="text-light-secondary dark:text-dark-secondary">
          No team members yet
        </p>
      </div>

      <div
        v-else
        class="space-y-4"
      >
        <DashboardAccessPermissionCard
          v-for="user in projectUsers"
          :key="user.id"
          :user="user"
          :project-id="projectId"
          :can-manage="canManageUsers"
          :is-current-user="isCurrentUser(user.id)"
          @update="handlePermissionUpdate"
          @remove="handleUserRemove"
        />
      </div>
    </div>

    <DashboardAccessInviteMemberModal
      v-if="showInviteModal"
      :project-id="projectId"
      @close="showInviteModal = false"
      @invited="handleInvited"
    />

    <ConfirmationModal
      v-if="showRemoveConfirmation"
      title="Remove Team Member"
      :message="removeConfirmationMessage"
      confirm-text="Remove"
      :is-processing="isRemoving"
      processing-text="Removing..."
      @confirm="confirmRemoveUser"
      @cancel="cancelRemoveUser"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useQuery, useMutation, useQueryClient } from '@tanstack/vue-query'
import type { IUser, PermissionLevel } from '~/types'
import { EntityType } from '~/types'
import useUsers from '~/composables/use-user-service'
import usePermissions from '~/composables/use-permissions-service'

const route = useRoute()
const projectId = computed(() => route.params.id as string)

const { getUsersWithEntityPermissions } = useUsers()
const { updatePermission: updatePermissionApi, deletePermission: deletePermissionApi } = usePermissions()
const queryClient = useQueryClient()
const { showToast } = useToast()

// State management
const showInviteModal = ref(false)
const showRemoveConfirmation = ref(false)
const userToRemove = ref<IUser | null>(null)

// Query for project users with their permissions
const { data: projectUsersData, isLoading } = useQuery({
  queryKey: ['entityUsers', projectId.value, EntityType.Project],
  queryFn: () => getUsersWithEntityPermissions(projectId.value, EntityType.Project),
})

const projectUsers = computed(() => projectUsersData.value?.data || [])

// Computed properties for user management
const canManageUsers = computed(() => {
  // From the screenshot, we can see projectUsers.value[0] has the user data
  const currentUser = projectUsers.value[0]
  // Access the first permission in the permissions array
  const currentUserPermission = currentUser?.permissions?.[0]?.permissionLevel

  return currentUserPermission === 'SuperAdmin' || currentUserPermission === 'Admin'
})

// User-related methods
const isCurrentUser = (userId: string) => {
  // Replace with actual authentication check
  return userId === '7F58AFB9-CFEB-4117-998A-A6658C3BCC90'
}

// Mutations for updating and removing permissions
const { mutate: updatePermission } = useMutation({
  mutationFn: async ({ user, newLevel }: { user: IUser, newLevel: PermissionLevel }) => {
    // Find the project-specific permission
    const projectPermission = user.permissions?.find(p => p.entityId === projectId.value && p.entityType === EntityType.Project)

    if (!projectPermission) {
      throw new Error('No project permission found')
    }

    return await updatePermissionApi({
      userId: user.id,
      entityId: projectId.value,
      entityType: EntityType.Project,
      newPermissionLevel: newLevel,
    })
  },
  onSuccess: () => {
    // Invalidate and refetch project users
    queryClient.invalidateQueries({
      queryKey: ['entityUsers', projectId.value, EntityType.Project],
    })
    showToast({
      type: 'success',
      title: 'Permission Updated',
      message: 'User permission has been updated successfully.',
    })
  },
  onError: (error: Error) => {
    showToast({
      type: 'error',
      title: 'Update Failed',
      message: error.message || 'Failed to update user permission.',
    })
  },
})

// Remove user from project mutation
const { mutate: removeUser, isPending: isRemoving } = useMutation({
  mutationFn: async (user: IUser) => {
    return await deletePermissionApi(user.id, projectId.value, EntityType.Project)
  },
  onSuccess: () => {
    // Invalidate and refetch project users
    queryClient.invalidateQueries({
      queryKey: ['entityUsers', projectId.value, EntityType.Project],
    })
    showToast({
      type: 'success',
      title: 'User Removed',
      message: 'Team member has been removed from the project.',
    })
    showRemoveConfirmation.value = false
    userToRemove.value = null
  },
  onError: (error: Error) => {
    showToast({
      type: 'error',
      title: 'Removal Failed',
      message: error.message || 'Failed to remove team member.',
    })
    showRemoveConfirmation.value = false
    userToRemove.value = null
  },
})

// Event handlers
const handlePermissionUpdate = (user: IUser, newLevel: PermissionLevel) => {
  updatePermission({ user, newLevel })
}

const handleUserRemove = (user: IUser) => {
  userToRemove.value = user
  showRemoveConfirmation.value = true
}

const confirmRemoveUser = () => {
  if (userToRemove.value) {
    removeUser(userToRemove.value)
  }
}

const cancelRemoveUser = () => {
  showRemoveConfirmation.value = false
  userToRemove.value = null
}

const handleInvited = () => {
  showInviteModal.value = false
  // Invalidate and refetch project users
  queryClient.invalidateQueries({
    queryKey: ['entityUsers', projectId.value, EntityType.Project],
  })
}
</script>


=== components\Dashboard\Access\InviteMemberModal.vue ===
<template>
  <div
    class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"
    @click.self="$emit('close')"
  >
    <div
      class="w-full max-w-md mx-4 bg-light-surface dark:bg-dark-surface rounded-lg shadow-xl transform transition-all duration-300 ease-in-out"
      role="dialog"
      aria-modal="true"
    >
      <!-- Header -->
      <div class="flex justify-between items-center p-6 border-b border-light-secondary/10 dark:border-dark-secondary/10">
        <h2 class="text-xl font-semibold text-light-textbase dark:text-dark-textbase">
          Invite Team Member
        </h2>
        <button
          class="text-light-secondary dark:text-dark-secondary hover:text-light-textbase dark:hover:text-dark-textbase"
          @click="$emit('close')"
        >
          <Icon
            name="mdi:close"
            class="w-6 h-6"
          />
        </button>
      </div>

      <!-- Content -->
      <div class="p-6 space-y-6">
        <!-- User Search Section (previously shown) -->
        <div>
          <label class="block text-sm font-medium text-light-textbase dark:text-dark-textbase mb-1"> Search User </label>
          <div class="relative">
            <FormField
              v-model="searchTerm"
              label="Email or Name"
              type="text"
              placeholder="Search by email or name"
              :disabled="isPending"
            />

            <!-- Loading State -->
            <div
              v-if="isSearching"
              class="absolute z-10 w-full mt-1 flex items-center justify-center py-2 text-light-secondary dark:text-dark-secondary"
            >
              <LoadingSpinner class="h-5 w-5" />
              <span class="ml-2">Searching...</span>
            </div>

            <!-- Error State -->
            <div
              v-else-if="searchError"
              class="absolute z-10 w-full mt-1 bg-light-error/10 dark:bg-dark-error/10 text-light-error dark:text-dark-error p-2 rounded-md"
            >
              <p class="text-sm">
                <Icon
                  name="mdi:alert-circle"
                  class="inline-block mr-2 w-5 h-5"
                />
                {{ searchError.message || 'An error occurred while searching' }}
              </p>
            </div>

            <!-- Search Results Dropdown -->
            <div
              v-else-if="(searchResults.value?.data ?? []).length > 0"
              class="absolute z-10 w-full mt-1 bg-light-surface dark:bg-dark-surface border rounded-md shadow-lg max-h-60 overflow-y-auto"
            >
              <div
                v-for="user in searchResults.value?.data"
                :key="user.id"
                class="px-4 py-2 hover:bg-light-background dark:hover:bg-dark-background cursor-pointer flex items-center justify-between"
                @click="selectUser(user)"
              >
                <div>
                  <span class="font-medium">{{ user.email }}</span>
                </div>
                <Icon
                  v-if="selectedUser?.id === user.id"
                  name="mdi:check-circle"
                  class="w-5 h-5 text-light-success dark:text-dark-success"
                />
              </div>
            </div>

            <!-- No Results State -->
            <div
              v-else-if="searchTerm.length >= 2"
              class="absolute z-10 w-full mt-1 px-4 py-2 text-light-secondary dark:text-dark-secondary"
            >
              No users found
            </div>
          </div>
        </div>

        <!-- Selected User Display -->
        <div
          v-if="selectedUser"
          class="bg-light-background dark:bg-dark-background p-4 rounded-lg flex items-center justify-between"
        >
          <div class="flex items-center space-x-3">
            <Icon
              name="mdi:account-circle"
              class="w-10 h-10 text-light-secondary dark:text-dark-secondary"
            />
            <div>
              <div class="font-medium">
                {{ selectedUser.email }}
              </div>
            </div>
          </div>
          <button
            type="button"
            class="text-light-error dark:text-dark-error hover:opacity-80"
            @click="clearSelectedUser"
          >
            <Icon
              name="mdi:close-circle"
              class="w-6 h-6"
            />
          </button>
        </div>

        <!-- Permission Level Selection -->
        <div>
          <label class="block text-sm font-medium text-light-textbase dark:text-dark-textbase mb-1">
            Permission Level
            <span class="text-light-error dark:text-dark-error">*</span>
          </label>
          <select
            v-model="selectedPermissionLevelValue"
            class="w-full px-3 py-2 border rounded-md text-light-textbase dark:text-dark-textbase bg-light-background dark:bg-dark-background border-light-secondary/20 dark:border-dark-secondary/20"
            :disabled="isPending"
          >
            <option
              v-for="level in availablePermissionLevels"
              :key="level.value"
              :value="level.value"
            >
              {{ level.label }}
            </option>
          </select>

          <!-- Permission Description -->
          <div class="mt-4 p-4 bg-light-background dark:bg-dark-background rounded-lg">
            <h4 class="font-medium text-light-textbase dark:text-dark-textbase mb-2">
              {{ currentPermissionLevel.label }} Access
            </h4>
            <p class="text-sm text-light-secondary dark:text-dark-secondary">
              {{ currentPermissionLevel.description }}
            </p>
            <ul class="mt-2 space-y-1">
              <li
                v-for="(ability, index) in currentPermissionLevel.abilities"
                :key="index"
                class="text-sm flex items-center space-x-2 text-light-textbase dark:text-dark-textbase"
              >
                <Icon
                  name="mdi:check-circle"
                  class="w-4 h-4 text-light-success dark:text-dark-success"
                />
                <span>{{ ability }}</span>
              </li>
            </ul>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-4 pt-4">
          <button
            type="button"
            class="text-light-secondary dark:text-dark-secondary hover:underline px-4 py-2"
            :disabled="isPending"
            @click="$emit('close')"
          >
            Cancel
          </button>
          <button
            type="button"
            :disabled="isPending || !isFormValid"
            class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity disabled:opacity-50"
            @click="handleSubmit"
          >
            {{ isPending ? 'Sending Invitation...' : 'Send Invitation' }}
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { useMutation, useQuery } from '@tanstack/vue-query'
import { useToast } from '~/composables/use-toast-service'
import useUsers from '~/composables/use-user-service'
import useProjects from '~/composables/use-projects-service'
import { PermissionLevel, type IUser } from '~/types'

const props = defineProps<{
  projectId: string
}>()

const emit = defineEmits<{
  close: []
  invited: []
}>()

const { searchUsers } = useUsers()
const { addUserToProject } = useProjects()
const { showToast } = useToast()

// State management
const searchTerm = ref('')
const selectedUser = ref<IUser | null>(null)
const selectedPermissionLevelValue = ref<PermissionLevel>(PermissionLevel.ReadOnly)

// Search query using Vue Query
const searchQuery = useQuery({
  queryKey: ['userSearch', searchTerm],
  queryFn: () => searchUsers(searchTerm.value),
  enabled: computed(() => searchTerm.value.length >= 2),
  placeholderData: previousData => previousData,
  staleTime: 10000,
})

// Computed properties for search results and states
const searchResults = computed(() => searchQuery.data ?? [])
const isSearching = computed(() => searchQuery.isLoading.value)
const searchError = computed(() => searchQuery.error.value)

// Permission levels configuration
const permissionLevels = {
  [PermissionLevel.ReadOnly]: {
    value: PermissionLevel.ReadOnly,
    label: 'Read Only',
    description: 'Can view project content but cannot make changes.',
    abilities: ['View all project content', 'View templates and containers', 'Download template versions'],
  },
  [PermissionLevel.Contributor]: {
    value: PermissionLevel.Contributor,
    label: 'Contributor',
    description: 'Can create and modify content within the project.',
    abilities: ['All Read Only permissions', 'Create and edit templates', 'Create and manage containers', 'Manage template versions'],
  },
  [PermissionLevel.Admin]: {
    value: PermissionLevel.Admin,
    label: 'Admin',
    description: 'Full project management capabilities except ownership transfer.',
    abilities: ['All Contributor permissions', 'Manage team members', 'Configure project settings', 'Manage API keys'],
  },
  [PermissionLevel.SuperAdmin]: {
    value: PermissionLevel.SuperAdmin,
    label: 'Super Admin',
    description: 'Full system-wide administrative access.',
    abilities: ['All Admin permissions', 'System-wide configuration', 'User management across all projects'],
  },
}

const availablePermissionLevels = Object.values(permissionLevels)

const currentPermissionLevel = computed(() => {
  return permissionLevels[selectedPermissionLevelValue.value] || permissionLevels[PermissionLevel.ReadOnly]
})

// Form validation
const isFormValid = computed(() => {
  return !!selectedUser.value && !!selectedPermissionLevelValue.value
})

// User selection method
const selectUser = (user: IUser) => {
  selectedUser.value = user
  searchTerm.value = '' // Clear search term
}

const clearSelectedUser = () => {
  selectedUser.value = null
}

// Invitation mutation
const { mutate, isPending } = useMutation({
  mutationFn: async () => {
    if (!selectedUser.value) {
      throw new Error('No user selected')
    }

    return await addUserToProject(props.projectId, {
      userId: selectedUser.value.id,
      permissionLevel: selectedPermissionLevelValue.value,
    })
  },
  onSuccess: () => {
    showToast({
      type: 'success',
      title: 'Invitation Sent',
      message: `An invitation has been sent to ${selectedUser.value?.email}`,
    })
    emit('invited')
  },
  onError: (error: Error) => {
    showToast({
      type: 'error',
      title: 'Invitation Failed',
      message: error.message || 'Failed to send invitation',
    })
  },
})

// Form submission handler
const handleSubmit = () => {
  // Validate form
  if (!isFormValid.value) {
    showToast({
      type: 'error',
      title: 'Incomplete Form',
      message: 'Please select a user and permission level',
    })
    return
  }

  // Trigger mutation
  mutate()
}

// Watch for search term changes
watch(searchTerm, (newTerm) => {
  // Reset search results if term is too short
  if (newTerm.length < 2) {
    searchQuery.refetch()
  }
})

// Cleanup on component unmount
onUnmounted(() => {
  selectedUser.value = null
})
</script>

<style scoped>
/* Custom scrollbar for search results */
.max-h-60::-webkit-scrollbar {
  width: 6px;
}

.max-h-60::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1);
}

.max-h-60::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 3px;
}
</style>


=== components\Dashboard\Access\PermissionCard.vue ===
<template>
  <div class="flex items-center justify-between p-4 bg-light-background dark:bg-dark-background rounded-lg">
    <div class="flex items-center space-x-4">
      <div class="relative">
        <Icon
          name="mdi:account-circle"
          class="w-10 h-10 text-light-secondary dark:text-dark-secondary"
        />
        <div
          v-if="isCurrentUser"
          class="absolute -top-1 -right-1 w-4 h-4 bg-light-success dark:bg-dark-success rounded-full border-2 border-light-background dark:border-dark-background"
          title="Current User"
        />
      </div>
      <div>
        <div class="font-medium text-light-textbase dark:text-dark-textbase">
          {{ user.email }}
        </div>
        <div class="flex items-center space-x-2 text-sm text-light-secondary dark:text-dark-secondary">
          <span> Added {{ localTime.toLocalTime(projectPermission?.createdDateTime || new Date()) }} </span>
          <span
            v-if="isCurrentUser"
            class="px-2 py-0.5 bg-light-success/10 dark:bg-dark-success/10 text-light-success dark:text-dark-success rounded-full text-xs"
          > You </span>
        </div>
      </div>
    </div>

    <div class="flex items-center space-x-4">
      <DashboardAccessPermissionSelect
        v-if="canManage"
        :model-value="projectPermission?.permissionLevel || PermissionLevel.ReadOnly"
        :disabled="isCurrentUser || !canManage"
        @update:model-value="(newLevel: PermissionLevel) => $emit('update', user, newLevel)"
      />
      <div
        v-else
        class="px-2 py-1 text-sm rounded-md bg-light-secondary/10 dark:bg-dark-secondary/10"
      >
        {{ formatPermissionLevel(projectPermission?.permissionLevel || PermissionLevel.ReadOnly) }}
      </div>

      <button
        v-if="canManage && !isCurrentUser"
        class="text-light-error dark:text-dark-error hover:opacity-80 transition-opacity"
        @click="$emit('remove', user)"
      >
        <Icon
          name="mdi:trash-can-outline"
          class="w-5 h-5"
        />
      </button>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { IUser } from '~/types'
import { EntityType, PermissionLevel } from '~/types'

const props = defineProps<{
  user: IUser
  projectId: string
  canManage: boolean
  isCurrentUser: boolean
}>()

defineEmits<{
  update: [user: IUser, newLevel: PermissionLevel]
  remove: [user: IUser]
}>()

const localTime = useLocalTime()

const projectPermission = computed(() => props.user.permissions?.find(p => p.entityId === props.projectId && p.entityType === EntityType.Project))

const formatPermissionLevel = (level: PermissionLevel): string => {
  return (
    {
      ReadOnly: 'Read Only',
      Contributor: 'Contributor',
      Admin: 'Admin',
      SuperAdmin: 'Super Admin',
    }[level] || level
  )
}
</script>


=== components\Dashboard\Access\PermissionSelect.vue ===
<template>
  <select
    :value="modelValue"
    :disabled="disabled"
    class="bg-light-surface dark:bg-dark-surface border border-light-secondary/20 dark:border-dark-secondary/20 rounded-md px-2 py-1 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
    @change="$emit('update:modelValue', ($event.target as HTMLSelectElement).value as PermissionLevel)"
  >
    <option
      v-for="level in availableLevels"
      :key="level"
      :value="level"
    >
      {{ formatPermissionLevel(level) }}
    </option>
  </select>
</template>

<script setup lang="ts">
import { PermissionLevel } from '~/types'

withDefaults(
  defineProps<{
    modelValue: PermissionLevel
    disabled?: boolean
  }>(),
  {
    disabled: false,
  },
)

defineEmits<{
  'update:modelValue': [value: PermissionLevel]
}>()

const availableLevels: PermissionLevel[] = [
  PermissionLevel.ReadOnly,
  PermissionLevel.Contributor,
  PermissionLevel.Admin,
  PermissionLevel.SuperAdmin,
]

const formatPermissionLevel = (level: PermissionLevel): string => {
  return (
    {
      ReadOnly: 'Read Only',
      Contributor: 'Contributor',
      Admin: 'Admin',
      SuperAdmin: 'Super Admin',
    }[level] || level
  )
}
</script>


=== components\Dashboard\Project\Card.vue ===
<template>
  <div class="project-card bg-light-surface dark:bg-dark-surface p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow relative">
    <button
      class="absolute top-2 right-2 text-light-secondary dark:text-dark-secondary hover:text-light-error dark:hover:text-dark-error transition-colors z-10"
      aria-label="Delete Project"
      @click="openDeleteConfirmation"
    >
      <Icon
        name="mdi:trash-can-outline"
        class="w-5 h-5"
      />
    </button>

    <div class="flex justify-between items-center mb-2 pr-8">
      <h3 class="text-lg font-semibold text-light-textbase dark:text-dark-textbase">
        {{ project.name }}
      </h3>
      <span class="text-xs text-light-secondary dark:text-dark-secondary"> Updated: {{ localTime.toLocalTime(project.updatedDateTime) }} </span>
    </div>
    <p class="text-sm text-light-secondary dark:text-dark-secondary mb-4 line-clamp-2">
      {{ project.description || 'No description provided' }}
    </p>

    <div class="grid grid-cols-3 gap-2 mb-4 text-center">
      <div class="bg-light-background dark:bg-dark-background rounded p-2">
        <p class="text-xs text-light-secondary dark:text-dark-secondary">
          Templates
        </p>
        <p class="text-sm font-semibold">
          {{ projectKpis.templateCount }}
        </p>
      </div>
      <div class="bg-light-background dark:bg-dark-background rounded p-2">
        <p class="text-xs text-light-secondary dark:text-dark-secondary">
          Containers
        </p>
        <p class="text-sm font-semibold">
          {{ projectKpis.containerCount }}
        </p>
      </div>
      <div class="bg-light-background dark:bg-dark-background rounded p-2">
        <p class="text-xs text-light-secondary dark:text-dark-secondary">
          Stages
        </p>
        <p class="text-sm font-semibold">
          {{ projectKpis.stageCount }}
        </p>
      </div>
    </div>

    <div class="flex justify-between items-center">
      <div class="flex space-x-2">
        <NuxtLink
          :to="`/dashboard/projects/${project.id}/manage`"
          class="bg-light-secondary dark:bg-dark-secondary text-white px-3 py-2 rounded-md text-sm hover:opacity-90 transition-opacity"
        >
          Manage Project
        </NuxtLink>
      </div>

      <NuxtLink
        :to="`/dashboard/projects/${project.id}/templates`"
        class="text-light-accent dark:text-dark-accent text-sm font-semibold hover:underline flex items-center"
      >
        Manage Templates
        <Icon
          name="mdi:chevron-right"
          class="w-4 h-4"
        />
      </NuxtLink>
    </div>

    <ConfirmationModal
      v-if="showDeleteConfirmation"
      title="Confirm Project Deletion"
      :message="`Are you sure you want to delete the project '${props.project.name}'? This action cannot be undone. All Containers and related Templates will also be deleted!`"
      :is-processing="isDeleting"
      processing-text="Deleting..."
      @cancel="showDeleteConfirmation = false"
      @confirm="handleDelete"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useMutation, useQueryClient, useQuery } from '@tanstack/vue-query'
import useProjects from '~/composables/use-projects-service'
import type { IApiResponse, IProject, IProjectKpis } from '~/types'

const props = defineProps<{
  project: IProject
}>()

const showDeleteConfirmation = ref(false)
const isDeleting = ref(false)

const { deleteProject: deleteProjectService, getProjectKpis } = useProjects()
const queryClient = useQueryClient()
const localTime = useLocalTime()

const {
  data: kpisData,
  isLoading: _isKpisLoading,
  isError: _isKpisError,
  error: _kpisError,
} = useQuery<IApiResponse<IProjectKpis>>({
  queryKey: ['projectKpis', props.project.id],
  queryFn: () => getProjectKpis(props.project.id),
  placeholderData: () => ({
    data: {
      templateCount: props.project.templates.length,
      containerCount: props.project.containers.length,
      stageCount: props.project.stages.length,
    },
    isSuccess: true,
    status: 200,
    errors: [],
    message: 'Project KPIs not found',
  }),
})

const projectKpis = computed(() => {
  const defaultKpis: IProjectKpis = {
    templateCount: props.project.templates.length,
    containerCount: props.project.containers.length,
    stageCount: props.project.stages.length,
  }

  if (!kpisData.value) return defaultKpis

  const apiResponse = kpisData.value as unknown as IApiResponse<IProjectKpis>
  return apiResponse.data || defaultKpis
})

const openDeleteConfirmation = () => {
  showDeleteConfirmation.value = true
}

const { mutate: deleteProject } = useMutation({
  mutationFn: async () => {
    // Ensure isDeleting is set to true only when the mutation starts
    return await deleteProjectService(props.project.id)
  },
  onMutate: () => {
    // Set isDeleting to true when mutation starts
    isDeleting.value = true
  },
  onSuccess: () => {
    // Invalidate and refetch project list
    queryClient.invalidateQueries({ queryKey: ['projects'] })
    showDeleteConfirmation.value = false
  },
  onError: (error) => {
    console.error('Failed to delete project:', error)
    isDeleting.value = false
    showDeleteConfirmation.value = false
  },
  onSettled: () => {
    // Ensure isDeleting is always set to false, regardless of success or failure
    isDeleting.value = false
    showDeleteConfirmation.value = false
  },
})

const handleDelete = () => {
  deleteProject()
}
</script>


=== components\Dashboard\Project\CreateModal.vue ===
<template>
  <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg w-full max-w-md">
      <h2 class="text-xl font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
        Create New Project
      </h2>
      <form @submit.prevent="handleSubmit">
        <div class="mb-4">
          <label
            for="projectName"
            class="block text-sm font-medium text-light-textbase dark:text-dark-textbase mb-1"
          >Project Name</label>
          <input
            id="projectName"
            v-model="projectName"
            type="text"
            required
            class="w-full px-3 py-2 border rounded-md text-light-textbase dark:text-dark-textbase bg-light-background dark:bg-dark-background"
          >
        </div>
        <div class="mb-4">
          <label
            for="projectDescription"
            class="block text-sm font-medium text-light-textbase dark:text-dark-textbase mb-1"
          >Description</label>
          <textarea
            id="projectDescription"
            v-model="projectDescription"
            rows="3"
            class="w-full px-3 py-2 border rounded-md text-light-textbase dark:text-dark-textbase bg-light-background dark:bg-dark-background"
          />
        </div>
        <div class="flex justify-end">
          <button
            type="button"
            class="mr-2 px-4 py-2 text-light-secondary dark:text-dark-secondary hover:underline"
            @click="$emit('close')"
          >
            Cancel
          </button>
          <button
            type="submit"
            :disabled="isPending"
            class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity disabled:opacity-50"
          >
            {{ isPending ? 'Creating...' : 'Create Project' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useMutation, useQueryClient } from '@tanstack/vue-query'
import useProjects from '~/composables/use-projects-service'
import type { ICreateProjectRequest } from '~/types'

const emit = defineEmits(['close'])
const { createProject } = useProjects()
const queryClient = useQueryClient()

const projectName = ref('')
const projectDescription = ref('')

const { mutate, isPending } = useMutation({
  mutationFn: async (newProject: ICreateProjectRequest) => {
    const result = await createProject(newProject)
    if (result.data) {
      return result.data
    }
    throw new Error('Failed to create project')
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ['projects'] })
    emit('close')
  },
  onError: (error: Error) => {
    console.error('Failed to create project:', error)
    // Add user-facing error handling here
  },
})

const handleSubmit = () => {
  mutate({
    name: projectName.value,
    description: projectDescription.value,
    ownerId: '7F58AFB9-CFEB-4117-998A-A6658C3BCC90', // TODO: Replace with actual user ID from auth system
  })
}
</script>


=== components\Dashboard\Project\Details.vue ===
<template>
  <div class="space-y-6">
    <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg shadow-sm">
      <h2 class="text-xl font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
        Project Details
      </h2>

      <div
        v-if="!project"
        class="py-8 text-center text-light-secondary dark:text-dark-secondary"
      >
        <LoadingSpinner v-if="isLoading" />
        <p v-else>
          Project details not available
        </p>
      </div>

      <form
        v-else
        class="max-w-2xl"
        @submit.prevent="handleSubmit"
      >
        <div class="space-y-4">
          <FormField
            v-model="form.name"
            label="Project Name"
            placeholder="Enter project name"
            :error="errors.name"
            :max-length="100"
            show-char-count
            required
            :disabled="isPending"
          />

          <FormField
            v-model="form.description"
            label="Description"
            type="textarea"
            placeholder="Describe your project"
            :error="errors.description"
            helper-text="Provide a clear description of your project's purpose and scope"
            :max-length="500"
            show-char-count
            :rows="4"
            :disabled="isPending"
          />

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              class="text-light-secondary dark:text-dark-secondary hover:underline px-4 py-2"
              :disabled="isPending"
              @click="resetForm"
            >
              Reset
            </button>
            <button
              type="submit"
              :disabled="isPending || !isFormChanged"
              class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity disabled:opacity-50"
            >
              {{ isPending ? 'Saving...' : 'Save Changes' }}
            </button>
          </div>
        </div>
      </form>
    </div>

    <DashboardProjectStats :project="project!" />
  </div>
</template>

<script setup lang="ts">
import { useMutation, useQueryClient } from '@tanstack/vue-query'
import useProjects from '~/composables/use-projects-service'
import type { IProject, IUpdateProjectRequest } from '~/types'

const props = withDefaults(
  defineProps<{
    project?: IProject
    isLoading?: boolean
  }>(),
  {
    isLoading: false,
  },
)

const { updateProject } = useProjects()
const queryClient = useQueryClient()
const { showToast } = useToast()

// Form state
const initialForm = reactive({
  name: '',
  description: '',
})

const form = reactive({
  name: '',
  description: '',
})

watch(
  () => props.project,
  (newProject) => {
    if (newProject) {
      initialForm.name = newProject.name
      initialForm.description = newProject.description || ''

      // Reset form to initial values
      form.name = initialForm.name
      form.description = initialForm.description
    }
  },
  { immediate: true },
)

const errors = reactive({
  name: '',
  description: '',
})

const isFormChanged = computed(() => {
  return form.name !== initialForm.name || form.description !== initialForm.description
})

const validateForm = (): boolean => {
  let isValid = true
  errors.name = ''
  errors.description = ''

  if (!form.name.trim()) {
    errors.name = 'Project name is required'
    isValid = false
  }
  else if (form.name.length < 3) {
    errors.name = 'Project name must be at least 3 characters'
    isValid = false
  }

  if (form.description && form.description.length < 10) {
    errors.description = 'Description must be at least 10 characters'
    isValid = false
  }

  return isValid
}

const { mutate, isPending } = useMutation({
  mutationFn: async (updateData: IUpdateProjectRequest) => {
    if (!props.project) throw new Error('Project not found')
    const result = await updateProject(props.project.id, updateData)
    if (result.data) {
      return result.data
    }
    throw new Error('Failed to update project')
  },
  onSuccess: (data) => {
    if (!props.project) return

    // Update the cache
    queryClient.setQueryData(['project', props.project.id], {
      data,
      isSuccess: true,
      status: 200,
      errors: [],
    })

    // Update initial form state
    Object.assign(initialForm, {
      name: data.name,
      description: data.description,
    })

    showToast({
      type: 'success',
      title: 'Project Updated',
      message: 'Project details have been successfully updated.',
    })
  },
  onError: (error: Error) => {
    console.error(error)
    showToast({
      type: 'error',
      title: 'Update Failed',
      message: error.message || 'Failed to update project details.',
    })
  },
})

// Form submission
const handleSubmit = () => {
  if (!validateForm()) {
    showToast({
      type: 'error',
      title: 'Validation Error',
      message: 'Please check the form for errors.',
    })
    return
  }

  mutate({
    name: form.name.trim(),
    description: form.description.trim() || '',
  })
}

// Reset form
const resetForm = () => {
  form.name = initialForm.name
  form.description = initialForm.description
  errors.name = ''
  errors.description = ''
}
</script>


=== components\Dashboard\Project\Layout.vue ===
<template>
  <div class="dashboard-layout">
    <div class="flex justify-between items-center ml-4 mb-6 mr-4 mt-2">
      <h1 class="text-2xl font-bold text-light-textbase dark:text-dark-textbase">
        Dashboard
      </h1>
      <button
        type="button"
        class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity"
        @click.prevent="openCreateProjectModal"
      >
        Create New Project
      </button>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="md:col-span-2 ml-4">
        <DashboardProjectList @create-project="openCreateProjectModal" />
      </div>
      <div class="mr-4">
        <DashboardQuickActions />
      </div>
    </div>

    <DashboardProjectCreateModal
      v-if="showCreateProjectModal"
      @close="closeCreateProjectModal"
    />
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'

const showCreateProjectModal = ref(false)

const openCreateProjectModal = () => {
  console.log('Attempting to open modal', showCreateProjectModal.value)
  showCreateProjectModal.value = true
}

const closeCreateProjectModal = () => {
  showCreateProjectModal.value = false
}
</script>


=== components\Dashboard\Project\List.vue ===
<template>
  <div class="project-list">
    <h2 class="text-xl font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
      Your Projects
    </h2>
    <div
      v-if="isLoading"
      class="text-light-secondary dark:text-dark-secondary"
    >
      Loading projects...
    </div>
    <div
      v-else-if="isError"
      class="text-light-error dark:text-dark-error"
    >
      Error loading projects: {{ error }}
    </div>
    <div
      v-else-if="projects.length === 0"
      class="text-center py-8"
    >
      <p class="text-light-secondary dark:text-dark-secondary mb-4">
        No projects found.
      </p>
      <p class="text-light-secondary dark:text-dark-secondary mb-6">
        Create a project to get started!
      </p>
    </div>
    <div
      v-else
      class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-2 gap-4"
    >
      <DashboardProjectCard
        v-for="project in projects"
        :key="project.id"
        :project="project"
      />
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { useQuery } from '@tanstack/vue-query'
import useProjects from '~/composables/use-projects-service'
import type { IProject, IApiResponse } from '~/types'

const { getProjectsByUserId } = useProjects()

// TODO: Replace with actual user ID from auth system
const userId = '7F58AFB9-CFEB-4117-998A-A6658C3BCC90'

const { isLoading, isError, data, error } = useQuery<IApiResponse<IProject[]>>({
  queryKey: ['projects', userId],
  queryFn: () => getProjectsByUserId(userId),
  placeholderData: () => ({
    data: [] as IProject[],
    isSuccess: true,
    status: 200,
    errors: [],
    message: 'No projects found',
  }),
})

const projects = computed<IProject[]>(() => {
  if (data.value && 'data' in data.value) {
    return (data.value as IApiResponse<IProject[]>).data || []
  }
  return []
})
</script>


=== components\Dashboard\Project\Stats.vue ===
<template>
  <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg shadow-sm">
    <h2 class="text-xl font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
      Project Statistics
    </h2>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <!-- <StatCard :value="project.templates?.length || 0" label="Templates" icon="mdi:file-document-outline" /> -->
      <StatCard
        :value="0"
        label="Templates"
        icon="mdi:file-document-outline"
      />
      <StatCard
        :value="teamMembersCount"
        label="Team Members"
        icon="mdi:account-group-outline"
      />
      <StatCard
        :value="activeApiKeysCount"
        label="Active API Keys"
        icon="mdi:key-outline"
      />
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
// import type { IProject } from '~/types';

// defineProps<{
//   project: IProject;
// }>();

const teamMembersCount = computed(() => {
  // return props.project.permissions?.length || 0;
  return 0
})

const activeApiKeysCount = computed(() => {
  // return props.project.apiKeys?.filter((key) => !key.isExpired).length || 0;
  return 0
})
</script>


=== components\Dashboard\QuickActions.vue ===
<template>
  <div class="bg-light-surface dark:bg-dark-surface p-4 rounded-lg shadow-md">
    <h2 class="text-lg font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
      Quick Actions
    </h2>
    <div class="space-y-2">
      <NuxtLink
        v-for="action in quickActions"
        :key="action.to"
        :to="action.to"
        class="block bg-light-background dark:bg-dark-background p-3 rounded-md hover:bg-light-accent/10 dark:hover:bg-dark-accent/10 transition-colors"
      >
        <div class="flex items-center justify-between">
          <span class="text-light-textbase dark:text-dark-textbase">{{ action.label }}</span>
          <Icon
            :name="action.icon"
            class="text-light-secondary dark:text-dark-secondary"
          />
        </div>
      </NuxtLink>
    </div>
  </div>
</template>

<script setup lang="ts">
interface QuickAction {
  label: string
  to: string
  icon: string
}

const quickActions: QuickAction[] = [
  {
    label: 'Account Settings',
    to: '/accountsettings',
    icon: 'mdi:account-settings',
  },
  {
    label: 'User Management',
    to: '/usermanagement',
    icon: 'mdi:user-group',
  },
]
</script>


=== components\Error.vue ===
<script lang="ts" setup>
// components
const PageWrapper = resolveComponent('LayoutPageWrapper')

// compiler macro
const props = defineProps({
  code: {
    type: Number,
    default: 400,
  },
  wrap: {
    type: Boolean,
    default: false,
  },
})

// computed
const errorsMap: {
  [key: string]: string
} = {
  400: 'Bad Request',
  401: 'Unauthorized',
  403: 'Forbidden',
  404: 'Not Found',
}
const error = computed(() => {
  const { code } = props
  return {
    code,
    message: errorsMap[code.toString()] || 'Unknown Error',
  }
})
</script>

<template>
  <component
    :is="props.wrap ? PageWrapper : 'div'"
    :class="props.wrap ? 'flex flex-col items-center justify-center' : ''"
  >
    <h1 class="text-center mb-6 leading-3">
      <span class="font-bold text-8xl block">{{ error.code }}</span>
      <span class="block italic">{{ error.message }}</span>
    </h1>
    <BLButton
      to="/"
      size="sm"
    >
      Home
    </BLButton>
  </component>
</template>


=== components\FormContainer.vue ===
<template>
  <div class="max-w-lg mx-auto bg-light-primary dark:bg-dark-surface p-8 rounded-lg shadow">
    <slot />
  </div>
</template>


=== components\FormField.vue ===
<script setup lang="ts">
import { ref, computed } from 'vue'

const props = withDefaults(
  defineProps<{
    modelValue: string
    label: string
    type?: string
    placeholder?: string
    helperText?: string
    error?: string
    required?: boolean
    disabled?: boolean
    rows?: number
    maxLength?: number
    showCharCount?: boolean
    id?: string
  }>(),
  {
    type: 'text',
    placeholder: '',
    helperText: '',
    error: '',
    maxLength: 1000,
    id: '',
    required: false,
    disabled: false,
    rows: 3,
    showCharCount: false,
  },
)

const emit = defineEmits<{
  'update:modelValue': [value: string]
}>()

// Generate a unique ID if not provided
// const uniqueId = computed(() => props.id || `field-${Math.random().toString(36).substring(2, 9)}`);

// Password visibility handling
const showPassword = ref(false)
const isPasswordType = computed(() => props.type === 'password')
// const effectiveType = computed(() => {
//   if (isPasswordType.value && showPassword.value) {
//     return 'text';
//   }
//   return props.type;
// });

const togglePasswordVisibility = () => {
  showPassword.value = !showPassword.value
}

const handleInput = (event: Event) => {
  const target = event.target as HTMLInputElement
  let value = target.value

  // Handle maxLength if specified
  if (props.maxLength && value.length > props.maxLength) {
    value = value.slice(0, props.maxLength)
  }

  emit('update:modelValue', value)
}
</script>

<template>
  <div class="form-field">
    <label
      :for="id"
      class="block text-sm font-medium text-light-textbase dark:text-dark-textbase mb-1"
    >
      {{ label }}
      <span
        v-if="required"
        class="text-light-error dark:text-dark-error"
      >*</span>
    </label>

    <template v-if="type === 'textarea'">
      <textarea
        :id="id"
        :value="modelValue"
        :placeholder="placeholder"
        :rows="rows"
        :disabled="disabled"
        :required="required"
        class="w-full px-3 py-2 border rounded-md text-light-textbase dark:text-dark-textbase bg-light-background dark:bg-dark-background disabled:opacity-50 disabled:cursor-not-allowed"
        :class="[
          error
            ? 'border-light-error dark:border-dark-error focus:ring-light-error dark:focus:ring-dark-error'
            : 'border-light-secondary/20 dark:border-dark-secondary/20 focus:border-light-primary dark:focus:border-dark-primary focus:ring-light-primary dark:focus:ring-dark-primary',
        ]"
        v-bind="$attrs"
        @input="$emit('update:modelValue', ($event.target as HTMLTextAreaElement).value)"
      />
    </template>

    <template v-else-if="type === 'select'">
      <select
        :id="id"
        :value="modelValue"
        :disabled="disabled"
        :required="required"
        class="w-full px-3 py-2 border rounded-md text-light-textbase dark:text-dark-textbase bg-light-background dark:bg-dark-background disabled:opacity-50 disabled:cursor-not-allowed"
        :class="[
          error
            ? 'border-light-error dark:border-dark-error focus:ring-light-error dark:focus:ring-dark-error'
            : 'border-light-secondary/20 dark:border-dark-secondary/20 focus:border-light-primary dark:focus:border-dark-primary focus:ring-light-primary dark:focus:ring-dark-primary',
        ]"
        v-bind="$attrs"
        @change="$emit('update:modelValue', ($event.target as HTMLSelectElement).value)"
      >
        <option
          v-if="placeholder"
          value=""
        >
          {{ placeholder }}
        </option>
        <slot />
      </select>
    </template>

    <template v-else>
      <div class="relative">
        <input
          :id="id"
          :type="type"
          :value="modelValue"
          :placeholder="placeholder"
          :disabled="disabled"
          :required="required"
          :maxlength="maxLength"
          class="w-full px-3 py-2 border rounded-md text-light-textbase dark:text-dark-textbase bg-light-background dark:bg-dark-background disabled:opacity-50 disabled:cursor-not-allowed"
          :class="[
            error
              ? 'border-light-error dark:border-dark-error focus:ring-light-error dark:focus:ring-dark-error'
              : 'border-light-secondary/20 dark:border-dark-secondary/20 focus:border-light-primary dark:focus:border-dark-primary focus:ring-light-primary dark:focus:ring-dark-primary',
            { 'pr-10': isPasswordType || showCharCount },
          ]"
          v-bind="$attrs"
          @input="handleInput"
        >

        <!-- Password Toggle Button -->
        <button
          v-if="isPasswordType"
          type="button"
          class="absolute inset-y-0 right-0 flex items-center pr-3 text-light-secondary dark:text-dark-secondary hover:text-light-primary dark:hover:text-dark-primary"
          @click="togglePasswordVisibility"
        >
          <Icon
            :name="showPassword ? 'mdi:eye-off' : 'mdi:eye'"
            class="w-5 h-5"
          />
        </button>

        <!-- Character Count -->
        <div
          v-if="showCharCount"
          class="absolute inset-y-0 right-0 flex items-center pr-3 text-sm text-light-secondary dark:text-dark-secondary"
        >
          {{ modelValue?.length || 0 }}/{{ maxLength }}
        </div>
      </div>
    </template>

    <!-- Helper Text -->
    <div
      v-if="helperText"
      class="mt-1 text-sm text-light-secondary dark:text-dark-secondary"
    >
      {{ helperText }}
    </div>

    <!-- Error Message -->
    <div
      v-if="error"
      class="mt-1 text-sm text-light-error dark:text-dark-error flex items-center space-x-1"
    >
      <Icon
        name="mdi:alert-circle"
        class="w-4 h-4"
      />
      <span>{{ error }}</span>
    </div>
  </div>
</template>

<style scoped>
.form-field {
  @apply relative;
}

/* Focus styles */
input:focus,
textarea:focus,
select:focus {
  @apply outline-none ring-2 ring-opacity-50;
}

/* Transition for all interactive states */
input,
textarea,
select,
button {
  @apply transition-all duration-200;
}
</style>


=== components\GithubForm.vue ===
<script lang="ts" setup>
const config = useRuntimeConfig()

const githubRepoOwner = 'Battle-Line-Productions'
const githubRepoName = 'BattleSites'
const githubToken = config.public.githubPat

// Form data
const formData = ref({
  name: '',
  email: '',
  type: 'feature',
  description: '',
})

// Handle form submission
const handleSubmit = async () => {
  const issueTitle = `${formData.value.type === 'feature' ? 'Feature Request' : 'Bug Report'}: ${formData.value.name}`
  const issueBody = `
    **Description:**
    ${formData.value.description}

    **Submitted by:** ${formData.value.name} (${formData.value.email})
  `

  const githubIssueData = {
    title: issueTitle,
    body: issueBody,
    labels: [formData.value.type === 'feature' ? 'feature request' : 'bug'],
  }

  try {
    const response = await fetch(`https://api.github.com/repos/${githubRepoOwner}/${githubRepoName}/issues`, {
      method: 'POST',
      headers: {
        'Authorization': `token ${githubToken}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(githubIssueData),
    })

    if (response.ok) {
      alert('Thank you for your submission! The issue has been created.')
    }
    else {
      console.error('GitHub API error:', await response.json())
      alert('There was an issue creating the GitHub issue.')
    }
  }
  catch (error) {
    console.error('Submission error:', error)
    alert('There was an error submitting the form.')
  }

  // Clear form after submission
  formData.value = {
    name: '',
    email: '',
    type: 'feature',
    description: '',
  }
}
</script>

<template>
  <section class="py-16 bg-light-background dark:bg-dark-background">
    <div class="container mx-auto px-4">
      <!-- Make sure it has the same container and padding -->
      <h2 class="text-3xl font-bold text-center text-light-textbase dark:text-dark-textbase mb-6">
        Request a Feature or Report a Bug
      </h2>
      <form
        class="w-full bg-light-surface dark:bg-dark-surface p-6 rounded-lg shadow-lg"
        @submit.prevent="handleSubmit"
      >
        <!-- w-full to take up full width -->
        <div class="mb-4">
          <label
            for="name"
            class="block text-sm font-medium text-light-textbase dark:text-dark-textbase"
          >Name</label>
          <input
            id="name"
            v-model="formData.name"
            type="text"
            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary bg-light-background dark:bg-dark-background text-light-textbase dark:text-dark-textbase p-2"
            required
          >
        </div>

        <div class="mb-4">
          <label
            for="email"
            class="block text-sm font-medium text-light-textbase dark:text-dark-textbase"
          >Email</label>
          <input
            id="email"
            v-model="formData.email"
            type="email"
            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary bg-light-background dark:bg-dark-background text-light-textbase dark:text-dark-textbase p-2"
            required
          >
        </div>

        <div class="mb-4">
          <label
            for="type"
            class="block text-sm font-medium text-light-textbase dark:text-dark-textbase"
          >Request Type</label>
          <select
            id="type"
            v-model="formData.type"
            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary bg-light-background dark:bg-dark-background text-light-textbase dark:text-dark-textbase p-2"
            required
          >
            <option value="feature">
              Feature Request
            </option>
            <option value="bug">
              Bug Report
            </option>
            <option value="bug">
              Just Sayin Hey!
            </option>
          </select>
        </div>

        <div class="mb-4">
          <label
            for="description"
            class="block text-sm font-medium text-light-textbase dark:text-dark-textbase"
          >Description</label>
          <textarea
            id="description"
            v-model="formData.description"
            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary bg-light-background dark:bg-dark-background text-light-textbase dark:text-dark-textbase p-2"
            rows="4"
            required
          />
        </div>

        <button
          type="submit"
          class="w-full bg-light-primary dark:bg-dark-primary text-white font-bold py-2 px-4 rounded-full hover:bg-light-accent dark:hover:bg-dark-accent transition-colors"
        >
          Submit
        </button>
      </form>
    </div>
  </section>
</template>


=== components\HomePage\Cta.vue ===
<template>
  <div class="bg-light-background dark:bg-dark-background">
    <div class="mx-auto max-w-7xl py-24 sm:px-6 sm:py-32 lg:px-8">
      <div
        class="relative isolate overflow-hidden bg-light-surface dark:bg-dark-surface px-6 pt-16 shadow-2xl sm:rounded-3xl sm:px-16 md:pt-24 lg:flex lg:gap-x-20 lg:px-24 lg:pt-0"
      >
        <svg
          viewBox="0 0 1024 1024"
          class="absolute left-1/2 top-1/2 -z-10 h-[64rem] w-[64rem] -translate-y-1/2 [mask-image:radial-gradient(closest-side,white,transparent)] sm:left-full sm:-ml-80 lg:left-1/2 lg:ml-0 lg:-translate-x-1/2 lg:translate-y-0"
          aria-hidden="true"
        >
          <circle
            cx="512"
            cy="512"
            r="512"
            fill="url(#759c1415-0410-454c-8f7c-9a820de03641)"
            fill-opacity="0.7"
          />
          <defs>
            <radialGradient id="759c1415-0410-454c-8f7c-9a820de03641">
              <stop stop-color="#60a5fa" />
              <!-- light-primary -->
              <stop
                offset="1"
                stop-color="#6ee7b7"
              />
              <!-- light-accent -->
            </radialGradient>
          </defs>
        </svg>
        <div class="mx-auto max-w-md text-center lg:mx-0 lg:flex-auto lg:py-32 lg:text-left">
          <h2 class="text-3xl font-bold tracking-tight text-light-textbase dark:text-dark-textbase sm:text-4xl">
            Streamline Your Communication.<br>Start Using CommuniQueue Today.
          </h2>
          <p class="mt-6 text-lg leading-8 text-light-secondary dark:text-dark-secondary">
            Effortlessly create, organize, and send personalized emails and texts using our intuitive template management system. Boost your productivity and streamline your
            communication process.
          </p>
          <div class="mt-10 flex items-center justify-center gap-x-6 lg:justify-start">
            <NuxtLink
              to="/get-started"
              class="rounded-md bg-light-primary dark:bg-dark-primary px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-light-accent dark:hover:bg-dark-accent focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-light-primary dark:focus-visible:outline-dark-primary"
            >
              Get Started
            </NuxtLink>
            <NuxtLink
              to="/features"
              class="text-sm font-semibold leading-6 text-light-textbase dark:text-dark-textbase"
            > Learn more <span aria-hidden="true">→</span> </NuxtLink>
          </div>
        </div>
        <div class="relative mt-16 h-80 lg:mt-8">
          <img
            class="absolute left-0 top-0 w-[57rem] max-w-none rounded-md bg-white/5 ring-1 ring-white/10"
            src="/assets/images/communiqueueLogo.png"
            alt="CommuniQueue App screenshot"
            width="1824"
            height="1080"
          >
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts"></script>


=== components\HomePage\Features.vue ===
<template>
  <div class="bg-light-background dark:bg-dark-background py-24 sm:py-32">
    <div class="mx-auto max-w-7xl px-6 lg:px-8">
      <div class="mx-auto max-w-2xl lg:text-center">
        <h2 class="text-base font-semibold leading-7 text-light-primary dark:text-dark-primary">
          Streamline Your Communication
        </h2>
        <p class="mt-2 text-3xl font-bold tracking-tight text-light-textbase dark:text-dark-textbase sm:text-4xl">
          Everything you need to manage your communications
        </p>
        <p class="mt-6 text-lg leading-8 text-light-secondary dark:text-dark-secondary">
          CommuniQueue provides a powerful platform for creating, organizing, and sending templated emails and texts effortlessly. Boost your productivity and streamline your
          communication process.
        </p>
      </div>
      <div class="mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none">
        <dl class="grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-3">
          <div
            v-for="feature in features"
            :key="feature.name"
            class="flex flex-col"
          >
            <dt class="flex items-center gap-x-3 text-base font-semibold leading-7 text-light-textbase dark:text-dark-textbase">
              <NuxtIcon
                :name="feature.icon"
                class="h-5 w-5 flex-none text-light-primary dark:text-dark-primary"
                aria-hidden="true"
              />
              {{ feature.name }}
            </dt>
            <dd class="mt-4 flex flex-auto flex-col text-base leading-7 text-light-secondary dark:text-dark-secondary">
              <p class="flex-auto">
                {{ feature.description }}
              </p>
              <p class="mt-6">
                <NuxtLink
                  :to="feature.href"
                  class="text-sm font-semibold leading-6 text-light-primary dark:text-dark-primary"
                >Learn more <span aria-hidden="true">→</span></NuxtLink>
              </p>
            </dd>
          </div>
        </dl>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
const features = [
  {
    name: 'Template Management',
    description:
      'Easily create and organize your communication templates. Our intuitive interface allows you to design and categorize templates for various purposes, ensuring you always have the right message ready.',
    href: '/features/template-management',
    icon: 'i-heroicons-document-text',
  },
  {
    name: 'Effortless Sending',
    description:
      'Send emails and texts with just a few clicks. Our streamlined process allows you to select a template, customize it if needed, and send it to your recipients quickly and efficiently.',
    href: '/features/effortless-sending',
    icon: 'i-heroicons-paper-airplane',
  },
  {
    name: 'Secure API',
    description:
      'Integrate our robust API for automated communications. Our secure API allows you to connect CommuniQueue with your existing systems, enabling automated sending of personalized messages at scale.',
    href: '/features/secure-api',
    icon: 'i-heroicons-lock-closed',
  },
]
</script>


=== components\HomePage\Hero.vue ===
<template>
  <div class="relative isolate overflow-hidden bg-light-background dark:bg-dark-background">
    <!-- Background pattern -->
    <svg
      aria-hidden="true"
      class="absolute inset-0 -z-10 h-full w-full stroke-light-primary/10 dark:stroke-dark-primary/10 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
    >
      <defs>
        <pattern
          id="983e3e4c-de6d-4c3f-8d64-b9761d1534cc"
          width="200"
          height="200"
          x="50%"
          y="-1"
          patternUnits="userSpaceOnUse"
        >
          <path
            d="M.5 200V.5H200"
            fill="none"
          />
        </pattern>
      </defs>
      <rect
        width="100%"
        height="100%"
        stroke-width="0"
        fill="url(#983e3e4c-de6d-4c3f-8d64-b9761d1534cc)"
      />
    </svg>

    <!-- Gradient blob -->
    <div
      aria-hidden="true"
      class="absolute left-[calc(50%-4rem)] top-10 -z-10 transform-gpu blur-3xl sm:left-[calc(50%-18rem)] lg:left-48 lg:top-[calc(50%-30rem)] xl:left-[calc(50%-24rem)]"
    >
      <div
        class="aspect-[1108/632] w-[69.25rem] bg-gradient-to-r from-light-primary to-light-accent dark:from-dark-primary dark:to-dark-accent opacity-20"
        style="
          clip-path: polygon(
            73.6% 51.7%,
            91.7% 11.8%,
            100% 46.4%,
            97.4% 82.2%,
            92.5% 84.9%,
            75.7% 64%,
            55.3% 47.5%,
            46.5% 49.4%,
            45% 62.9%,
            50.3% 87.2%,
            21.3% 64.1%,
            0.1% 100%,
            5.4% 51.1%,
            21.4% 63.9%,
            58.9% 0.2%,
            73.6% 51.7%
          );
        "
      />
    </div>

    <div class="mx-auto max-w-7xl px-6 py-24 sm:py-32 lg:flex lg:items-center lg:gap-x-10 lg:px-8 lg:py-40">
      <div class="mx-auto max-w-2xl lg:mx-0 lg:flex-auto">
        <h1 class="mt-10 max-w-lg text-4xl font-bold tracking-tight text-light-textbase dark:text-dark-textbase sm:text-6xl">
          Streamline Your Communication with CommuniQueue
        </h1>
        <p class="mt-6 text-lg leading-8 text-light-secondary dark:text-dark-secondary">
          Create, organize, and send emails and texts effortlessly using templates
        </p>
        <div class="mt-10 flex items-center gap-x-6">
          <NuxtLink
            to="/get-started"
            class="rounded-md bg-light-primary dark:bg-dark-primary px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-light-accent dark:hover:bg-dark-accent focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-light-primary dark:focus-visible:outline-dark-primary transition duration-300"
          >
            Get Started
          </NuxtLink>
          <NuxtLink
            to="/features"
            class="text-sm font-semibold leading-6 text-light-textbase dark:text-dark-textbase"
          >
            Learn more <span aria-hidden="true">→</span>
          </NuxtLink>
        </div>
      </div>
      <div class="mt-16 sm:mt-24 lg:mt-0 lg:flex-shrink-0 lg:flex-grow">
        <img
          alt="CommuniQueue App Screenshot"
          src="/assets/images/communiqueueLogo.png"
          class="mx-auto w-full max-w-[48rem] rounded-md shadow-2xl ring-1 ring-white/10"
        >
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
// You can add any necessary imports or logic here
</script>


=== components\InputField.vue ===
<script setup lang="ts">
defineProps<{
  label?: string
  fieldId?: string
  name?: string
  type?: string
  placeholder?: string
  inputClass?: string
  modelValue?: string
  required?: boolean
  error?: string
}>()

defineEmits(['update:modelValue'])
</script>

<template>
  <div class="mb-6">
    <label
      :for="fieldId"
      class="block mb-2 text-sm font-medium text-light-textbase dark:text-dark-textbase"
    >{{ label }}</label>
    <FormTextInput
      v-if="type !== 'textarea'"
      :id="fieldId"
      :type="type"
      :name="name"
      :placeholder="placeholder"
      :required="required"
      :model-value="modelValue"
      class="bg-light-background dark:bg-dark-surface border-light-secondary dark:border-dark-secondary text-light-textbase dark:text-dark-textbase rounded-lg focus:ring-light-primary dark:focus:ring-dark-primary focus:border-light-primary dark:focus:border-dark-primary block w-full"
      :class="[inputClass, { 'border-red-500': error }]"
      @input="$emit('update:modelValue', $event.target.value)"
    />
    <FormTextInput
      v-else
      :id="fieldId"
      :name="name"
      type="textarea"
      :placeholder="placeholder"
      :model-value="modelValue"
      :rows="4"
      class="bg-light-background dark:bg-dark-background border-light-secondary dark:border-dark-secondary text-light-textbase dark:text-dark-textbase rounded-lg focus:ring-light-primary dark:focus:ring-dark-primary focus:border-light-primary dark:focus:border-dark-primary block w-full"
      :class="[inputClass, { 'border-red-500': error }]"
      @input="$emit('update:modelValue', $event.target.value)"
    />
    <p
      v-if="error"
      class="text-red-500 text-sm mt-1"
    >
      {{ error }}
    </p>
  </div>
</template>


=== components\Layouts\Page\Content.vue ===
<template>
  <div
    class="flex w-full pt-[64px]"
    :style="{ 'min-height': 'var(--layout-page-content-min-height)' }"
  >
    <slot />
  </div>
</template>


=== components\Layouts\Page\Footer.vue ===
<script lang="ts" setup>
import { defineProps } from 'vue'

type Props = {
  year: number
  name: string
  appName: string
  innerClass?: string
}

const props = defineProps<Props>()
</script>

<template>
  <footer
    class="flex border-t border-light-surface dark:border-dark-surface border-opacity-10 dark:border-opacity-20 bg-light-surface dark:bg-dark-surface"
  >
    <div
      :class="[
        'flex-1 justify-between max-w-screen-2xl mx-auto px-4 flex flex-col md:flex-row py-2 space-y-2 md:space-y-0 items-center text-xs text-center md:text-left text-light-textbase dark:text-dark-textbase',
        props.innerClass,
      ]"
    >
      <div>
        Copyright ©
        {{ props.year }}
        {{ props.name }}. All rights reserved.
      </div>
      <div>{{ props.appName }}</div>
    </div>
  </footer>
</template>


=== components\Layouts\Page\Header.vue ===
<template>
  <div class="mb-4">
    <slot />
  </div>
</template>


=== components\Layouts\Page\Infobar.vue ===
<script lang="ts" setup>
import { computed } from 'vue'

/**
 * Interface describing your social links.
 */
interface SocialLink {
  name: string
  link: string
  icon: string
}

/**
 * Interface describing the infobar data.
 */
interface NavbarInfobar {
  email?: string
  phone?: string
  socials?: SocialLink[]
}

/**
 * Interface describing optional fields in the layout configuration
 * that this component needs.
 */
interface NavbarConfig {
  infobar?: NavbarInfobar
}

interface PageConfig {
  navbar?: NavbarConfig
}

interface LayoutConfig {
  page?: PageConfig
}

/**
 * Main app config interface for what this component depends on.
 */
interface AppConfig {
  layout?: LayoutConfig
}

/**
 * Define props for this component. We only need the `config` object here.
 */
const props = defineProps<{
  config: AppConfig
}>()

/**
 * Extract the information bar data using computed properties.
 * Defaults to an empty object if none is present.
 */
const infoBarData = computed<NavbarInfobar>(() => {
  return props.config?.layout?.page?.navbar?.infobar || {}
})

/**
 * Compute a flag to determine if the info bar should be displayed.
 * It checks whether:
 *  - The object is not empty
 *  - There's at least one truthy property
 */
const showInfoBar = computed<boolean>(() => {
  const data = infoBarData.value
  const keys = Object.keys(data)
  if (keys.length === 0) return false

  // Check if any key has a truthy value (e.g. non-empty string, array with length)
  return Object.values(data).some(v => v)
})
</script>

<template>
  <div
    v-if="showInfoBar"
    class="bg-light-surface dark:bg-dark-surface shadow"
  >
    <div class="max-w-7xl mx-auto flex justify-between items-center py-2 px-6">
      <!-- Email on the left -->
      <div class="flex items-center space-x-2">
        <Icon
          name="ic:outline-email"
          class="text-light-primary dark:text-dark-primary h-4 w-4"
        />
        <a
          v-if="infoBarData.email"
          :href="`mailto:${infoBarData.email}`"
          class="text-sm text-light-textbase dark:text-dark-textbase hover:text-light-primary dark:hover:text-dark-primary"
        >
          {{ infoBarData.email }}
        </a>
      </div>
      <!-- Phone and socials on the right -->
      <div class="flex items-center space-x-4">
        <!-- Phone -->
        <div class="flex items-center space-x-2">
          <Icon
            name="ic:outline-settings-phone"
            class="text-light-primary dark:text-dark-primary h-4 w-4"
          />
          <a
            v-if="infoBarData.phone"
            :href="`tel:${infoBarData.phone}`"
            class="text-sm text-light-textbase dark:text-dark-textbase hover:text-light-primary dark:hover:text-dark-primary"
          >
            {{ infoBarData.phone }}
          </a>
        </div>
        <!-- Divider -->
        <span class="border-r border-light-secondary dark:border-dark-secondary h-6" />
        <!-- Social Icons -->
        <a
          v-for="social in infoBarData.socials"
          :key="social.name"
          :href="social.link"
          target="_blank"
          class="text-light-textbase dark:text-dark-textbase hover:text-light-primary dark:hover:text-dark-primary"
        >
          <Icon
            :name="social.icon"
            class="h-4 w-4"
          />
        </a>
      </div>
    </div>
  </div>
</template>


=== components\Layouts\Page\Navbar.vue ===
<script lang="ts" setup>
import { ref, computed, onMounted, provide } from 'vue'
import type { LayoutPageNavbarMenu } from '~/types'

/**
 * Interface describing the portion of 'config' that this component needs.
 * Adjust fields according to your actual data shape.
 */
interface AppLayoutConfig {
  page?: {
    navbar?: {
      menus?: LayoutPageNavbarMenu[]
    }
  }
}

interface AppProjectLinks {
  links?: {
    github?: string
  }
}

interface AppConfig {
  /**
     * The display name of your application.
     */
  name: string

  /**
     * A nested object describing layout configs (menus, pages, etc.).
     */
  layout?: AppLayoutConfig

  /**
     * A nested object describing project-related links, e.g. GitHub link.
     */
  project?: AppProjectLinks
}

/**
 * Props definition for this component.
 */
const props = defineProps<{
  config: AppConfig
}>()

/**
 * Checks authentication status (using Logto).
 */
const checkAuthenticationStatus = async (): Promise<boolean> => {
  const client = useLogtoClient()

  if (!client) {
    throw new Error('Logto client is not available')
  }

  return await client.isAuthenticated()
}

/**
 * Example composable usage (like your original code).
 */
const $screen = useScreen()

/**
 * A computed array of menus, derived from the passed-in config prop.
 */
const menus = computed(() => {
  return (props.config?.layout?.page?.navbar?.menus || []) as LayoutPageNavbarMenu[]
})

// Drawer
const showDrawer = ref<boolean>(false)

/**
 * Provide a way to close the drawer from child components.
 */
provide('closeDrawer', () => {
  showDrawer.value = false
})

/**
 * Keep track of whether the user is authenticated.
 */
const isAuthenticated = ref<boolean>(false)

/**
 * When the component is mounted, check if the user is authenticated.
 */
onMounted(async () => {
  isAuthenticated.value = await checkAuthenticationStatus()
})

/**
 * Filter the menus so that items requiring auth are only shown if user is authenticated.
 */
const filteredMenus = computed(() => {
  return menus.value.filter((menu) => {
    return !menu.shouldRequireAuth || (menu.shouldRequireAuth && isAuthenticated.value)
  })
})
</script>

<template>
  <div class="fixed top-0 z-40 w-full transition-colors duration-300 lg:z-50">
    <div class="bg-light-surface dark:bg-dark-surface shadow">
      <!-- InfoBar Component - Placed at the very top -->
      <LayoutPageInfobar class="py-1" />
      <!-- Divider Line -->
      <div class="h-px bg-light-surface dark:bg-dark-surface max-w-screen-2xl mx-auto" />

      <!-- content -->
      <div class="flex items-center justify-between max-w-screen-2xl mx-auto py-3 px-4">
        <!-- title -->
        <div>
          <slot name="title">
            <NuxtLink
              to="/"
              class="font-bold text-lg text-light-primary dark:text-dark-primary"
            >
              <Icon
                name="simple-icons:nuxtdotjs"
                class="font-black text-xl font-mono mr-2 inline-block"
              />
              <!-- Use config prop rather than app config -->
              <span class="capitalize">{{ props.config.name }}</span>
            </NuxtLink>
          </slot>
        </div>

        <!-- menus -->
        <div
          v-if="$screen.higherThan('md', $screen.current.value)"
          class="flex space-x-4 items-center"
          :class="{ 'divide-x divide-light-secondary dark:divide-dark-secondary': menus.length > 0 }"
        >
          <div class="flex space-x-4 text-sm items-center">
            <!-- dynamic menus -->
            <template
              v-for="(item, i) in filteredMenus"
              :key="i"
            >
              <LayoutPageNavbarMenuRecursiveMenuComponent :menu="item" />
            </template>
          </div>
          <!-- others -->
          <div class="pl-4 flex space-x-3 text-xl">
            <LayoutPageNavbarDropdownThemeSwitcher />
          </div>
        </div>

        <!-- drawer:btn -->
        <div
          v-else
          class="flex space-x-4 items-center"
          :class="{ 'divide-x divide-light-secondary dark:divide-dark-secondary': menus.length > 0 }"
        >
          <div class="pl-4 flex space-x-3 text-xl">
            <!-- Example usage of config's GitHub link (if present) -->
            <BLLink
              v-if="props.config?.project?.links?.github"
              class="text-light-textbase dark:text-dark-textbase hover:text-light-primary dark:hover:text-dark-primary"
              @click.prevent="() => (showDrawer = !showDrawer)"
            >
              <Icon name="heroicons:bars-3-bottom-right-20-solid" />
            </BLLink>
          </div>
        </div>
      </div>

      <!-- misc -->
      <!-- drawer -->
      <ActionSheet
        v-if="!$screen.higherThan('md', $screen.current.value) && showDrawer"
        @close="() => (showDrawer = false)"
      >
        <ActionSheetGroup>
          <ActionSheetHeader>
            <ActionSheetHeaderTitle text="Menu" />
          </ActionSheetHeader>
          <!-- dynamic menus -->
          <ActionSheetItem>
            <div
              class="flex flex-col text-sm items-center divide-y divide-light-secondary dark:divide-dark-secondary text-center"
            >
              <template
                v-for="(item, i) in filteredMenus"
                :key="i"
              >
                <LayoutPageNavbarMenuRecursiveDrawerMenuComponent
                  :menu="item"
                  :index="i"
                />
              </template>
            </div>
          </ActionSheetItem>
          <ActionSheetItem class="flex flex-col">
            <div class="pb-2">
              <div class="mt-2 mb-2 text-sm font-bold capitalize">
                Change Theme
              </div>
              <LayoutPageNavbarDropdownThemeSwitcher type="select-box" />
            </div>
          </ActionSheetItem>
        </ActionSheetGroup>
      </ActionSheet>
    </div>
  </div>
</template>


=== components\Layouts\Page\NavbarDropdown\ThemeSwitcher.vue ===
<script lang="ts" setup>
const props = defineProps({
  type: {
    type: String,
    default: 'dropdown-right-top',
  },
})
const currentStyle = toRef(props, 'type')

const availableThemes = [
  {
    key: 'light',
    text: 'Light',
  },
  {
    key: 'dark',
    text: 'Dark',
  },
  {
    key: 'system',
    text: 'System',
  },
]
</script>

<template>
  <div class="flex items-center">
    <!-- Headless UI Dropdown for theme selection -->
    <HeadlessListbox
      v-if="currentStyle === 'dropdown-right-top'"
      v-model="$colorMode.preference"
      as="div"
      class="relative flex items-center"
    >
      <HeadlessListboxLabel class="sr-only">
        Theme Selection
      </HeadlessListboxLabel>
      <HeadlessListboxButton type="template">
        <BLLink class="text-light-secondary dark:text-dark-secondary">
          <!-- Display sun icon for light theme, moon for dark -->
          <span class="flex justify-center items-center dark:hidden">
            <Icon name="uil:sun" />
          </span>
          <span class="flex justify-center items-center dark:flex">
            <Icon name="uil:moon" />
          </span>
        </BLLink>
      </HeadlessListboxButton>
      <HeadlessListboxOptions
        class="p-1 absolute z-50 origin-top-right top-full right-0 outline-none bg-light-background dark:bg-dark-background rounded-lg ring-1 ring-light-secondary/10 shadow-lg overflow-hidden w-36 py-1 text-sm text-light-textbase dark:text-dark-textbase font-semibold"
      >
        <!-- Options for changing themes -->
        <HeadlessListboxOption
          v-for="theme in availableThemes"
          :key="theme.key"
          :value="theme.key"
          :class="{
            'py-2 px-2 flex items-center cursor-pointer': true,
            'text-light-primary bg-light-surface dark:bg-dark-surface/30': $colorMode.preference === theme.key,
            'hover:bg-light-surface dark:hover:bg-dark-surface/30': $colorMode.preference !== theme.key,
          }"
        >
          <!-- Icons corresponding to the theme options -->
          <span class="flex items-center mr-2">
            <Icon
              v-if="theme.key === 'light'"
              name="uil:sun"
            />
            <Icon
              v-else-if="theme.key === 'dark'"
              name="uil:moon"
            />
            <Icon
              v-else
              name="uil:laptop"
            />
            <!-- Icon for system default -->
          </span>
          {{ theme.text }}
        </HeadlessListboxOption>
      </HeadlessListboxOptions>
    </HeadlessListbox>
    <!-- Standard select box for non-dropdown style -->
    <select
      v-if="currentStyle === 'select-box'"
      v-model="$colorMode.preference"
      class="w-full px-2 py-1 pr-3 outline-none rounded border bg-light-background dark:bg-dark-background text-light-textbase dark:text-dark-textbase border-light-secondary/10 dark:border-dark-secondary/20"
    >
      <option
        v-for="theme in availableThemes"
        :key="theme.key"
        :value="theme.key"
        class="bg-light-background dark:bg-dark-background text-light-textbase dark:text-dark-textbase"
      >
        {{ theme.text }}
      </option>
    </select>
  </div>
</template>


=== components\Layouts\Page\NavbarMenu\Item.vue ===
<script lang="ts" setup>
import type { RouteLocationRaw } from 'vue-router'

const { parseMenuRoute, parseMenuTitle } = useNavbarParser()

interface LayoutPageNavbarMenu {
  type: 'link' | 'button'
  to?: RouteLocationRaw | ((nuxt: any) => RouteLocationRaw)
  title: string
}

interface LayoutPageNavbarMenuDropdownItem extends LayoutPageNavbarMenu { }

const props = defineProps({
  menu: {
    type: Object as () => LayoutPageNavbarMenu | LayoutPageNavbarMenuDropdownItem,
    required: true,
  },
  isDropdown: {
    type: Boolean,
    default: false,
  },
})

const closeDropdown = inject<() => void>('closeDropdown')
</script>

<template>
  <template v-if="menu?.type === 'link' && isDropdown">
    <NuxtLink
      :to="parseMenuRoute(menu?.to)"
      #="{ isActive }"
      @click="closeDropdown && closeDropdown()"
    >
      <div
        :class="[
          'transition-all duration-300 hover:bg-light-surface dark:hover:bg-dark-surface px-4 py-2 rounded-lg w-full',
          isActive ? 'text-light-textbase dark:text-dark-textbase font-bold' : 'text-light-secondary dark:text-dark-secondary',
        ]"
      >
        {{ parseMenuTitle(menu?.title) }}
      </div>
    </NuxtLink>
  </template>
  <template v-else-if="menu?.type === 'link'">
    <NuxtLink
      :to="parseMenuRoute(menu?.to)"
      #="{ isActive }"
    >
      <span
        :class="{ 'text-light-textbase dark:text-dark-textbase font-bold': isActive, 'text-light-secondary dark:text-dark-secondary': !isActive }"
      >{{
        parseMenuTitle(menu?.title)
      }}</span>
    </NuxtLink>
  </template>
  <template v-else-if="menu?.type === 'button'">
    <BLButton
      :text="parseMenuTitle(menu?.title)"
      size="xs"
      :to="parseMenuRoute(menu.to)"
    />
  </template>
</template>


=== components\Layouts\Page\NavbarMenu\RecursiveDrawerMenuComponent.vue ===
<script lang="ts" setup>
const { parseMenuRoute, parseMenuTitle } = useNavbarParser()

const props = defineProps({
  menu: {
    type: Object as () => LayoutPageNavbarMenuDropdownItem | LayoutPageNavbarMenu,
    required: true,
  },
  index: {
    type: Number,
    required: true,
  },
})

const route = useRoute()

const isActive = computed(() => {
  if (!(props.menu as any)?.children) return false
  const childs = ((props.menu as any)?.children || []) as LayoutPageNavbarMenu[]
  for (const child of childs) {
    const to = parseMenuRoute(child.to)
    if (typeof to === 'string' && to === route.path) return true
    if (route && route.name && route.name.toString().includes((to as any)?.name?.toString())) return true
  }
  return false
})
const closeDrawer = inject<() => void>('closeDrawer')
</script>

<template>
  <div class="text-lg md:text-base">
    <div v-if="menu?.type === 'link'">
      <NuxtLink
        :key="index"
        :to="parseMenuRoute(menu.to)"
        #="{ isActive }"
        class="w-full py-2 underline"
        @click="closeDrawer && closeDrawer()"
      >
        <span
          :class="{
            'text-light-textbase dark:text-dark-textbase font-bold': isActive,
            'text-light-secondary dark:text-dark-secondary': !isActive,
          }"
        >{{ parseMenuTitle(menu?.title) }}</span>
      </NuxtLink>
    </div>
    <div v-if="menu?.type === 'button'">
      <BLButton
        :key="index"
        :text="parseMenuTitle(menu?.title)"
        size="sm"
        :to="parseMenuRoute(menu.to)"
        class="w-full underline"
      />
    </div>
    <div v-if="menu?.type === 'dropdown'">
      <div
        :key="index"
        class="w-full"
      >
        <HeadlessDisclosure v-slot="{ open }">
          <HeadlessDisclosureButton
            :key="index"
            :class="['text-light-secondary dark:text-dark-secondary w-full py-2 flex items-center justify-center duration-300 transition-all', open ? 'font-bold' : '']"
          >
            <span>{{ parseMenuTitle(menu?.title) }}</span>
            <Icon
              name="carbon:chevron-right"
              class="ml-1"
              :class="[open ? 'duration-300 transition-all transform rotate-90' : 'rotate-0']"
            />
          </HeadlessDisclosureButton>
          <Transition
            enter-active-class="transition duration-100 ease-out"
            enter-from-class="transform scale-95 opacity-0"
            enter-to-class="transform scale-100 opacity-100"
            leave-active-class="transition duration-75 ease-out"
            leave-from-class="transform scale-100 opacity-100"
            leave-to-class="transform scale-95 opacity-0"
          >
            <HeadlessDisclosurePanel class="text-light-secondary dark:text-dark-secondary pb-2">
              <template
                v-for="(child, j) in menu?.children || []"
                :key="j"
              >
                <LayoutPageNavbarMenuRecursiveDrawerMenuComponent
                  :menu="child"
                  :index="j"
                  @click="showDrawer = false"
                />
              </template>
            </HeadlessDisclosurePanel>
          </Transition>
        </HeadlessDisclosure>
      </div>
    </div>
  </div>
</template>


=== components\Layouts\Page\NavbarMenu\RecursiveMenuComponent.vue ===
<script lang="ts" setup>
const { parseMenuRoute, parseMenuTitle } = useNavbarParser()

const props = defineProps({
  menu: {
    type: Object as () => LayoutPageNavbarMenuDropdownItem | LayoutPageNavbarMenu,
    required: true,
  },
})

const route = useRoute()

const isActive = computed(() => {
  if (!(props.menu as any)?.children) return false
  const childs = ((props.menu as any)?.children || []) as LayoutPageNavbarMenu[]
  for (const child of childs) {
    const to = parseMenuRoute(child.to)
    if (typeof to === 'string' && to === route.path) return true
    if (route && route.name && route.name.toString().includes((to as any)?.name?.toString())) return true
  }
  return false
})

provide('closeDropdown', close)
</script>

<template>
  <template v-if="menu.type === 'button' || menu.type === 'link'">
    <LayoutPageNavbarMenuItem :menu="menu" />
  </template>
  <template v-else-if="menu.children && menu.children.length > 0">
    <HeadlessPopover v-slot="{ open }">
      <HeadlessPopoverButton
        class="flex items-center transition-all duration-300 rounded-md px-2 py-1 text-light-textbase dark:text-dark-textbase hover:bg-light-secondary/50 dark:hover:bg-dark-secondary/50"
      >
        <span :class="`font-medium ${isActive ? 'font-bold' : ''}`">{{ parseMenuTitle(menu.title) }}</span>
        <Icon
          name="carbon:chevron-down"
          class="ml-1 w-4 h-4"
          :class="{ 'transform rotate-180': open }"
        />
      </HeadlessPopoverButton>
      <Transition
        enter-active-class="transition ease-out duration-200"
        enter-from-class="opacity-0 scale-95"
        enter-to-class="opacity-100 scale-100"
        leave-active-class="transition ease-in duration-150"
        leave-from-class="opacity-100 scale-100"
        leave-to-class="opacity-0 scale-95"
      >
        <HeadlessPopoverPanel
          v-slot="{ close }"
          class="absolute z-10 mt-1 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none bg-white dark:bg-gray-700"
        >
          <div class="py-1">
            <template
              v-for="(child, j) in menu.children"
              :key="j"
            >
              <LayoutPageNavbarMenuRecursiveMenuComponent
                :menu="child"
                is-dropdown
                class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600"
              />
            </template>
          </div>
        </HeadlessPopoverPanel>
      </Transition>
    </HeadlessPopover>
  </template>
</template>


=== components\Layouts\Page\NavbarMenu\Wrapper.vue ===
<script lang="ts" setup>
const route = useRoute()
const { parseMenuRoute, parseMenuTitle } = useNavbarParser()

const props = defineProps({
  menu: {
    type: Object as () => LayoutPageNavbarMenuDropdownItem | LayoutPageNavbarMenu,
    required: true,
  },
})
const isActive = computed(() => {
  if (!(props.menu as any)?.children) return false
  const childs = ((props.menu as any)?.children || []) as LayoutPageNavbarMenu[]
  for (const child of childs) {
    const to = parseMenuRoute(child.to)
    if (typeof to === 'string' && to === route.path) return true
    if (route.name?.toString().includes((to as any).name?.toString())) return true
  }
  return false
})
</script>

<template>
  <template v-if="menu.type !== 'dropdown'">
    <LayoutPageNavbarMenuItem :menu="menu" />
  </template>
  <template v-else-if="menu.children && menu.children.length > 0">
    <HeadlessPopover v-slot="{ open }">
      <HeadlessPopoverButton
        class="flex items-center transition-all duration-300 text-light-textbase dark:text-dark-textbase"
      >
        <span :class="[isActive ? 'font-bold' : '']">{{ parseMenuTitle(menu.title) }}</span>
        <Icon
          name="carbon:chevron-down"
          class="ml-1"
          :class="[open ? 'transform rotate-180' : '']"
        />
      </HeadlessPopoverButton>
      <Transition
        enter-active-class="transition duration-200 ease-out"
        enter-from-class="translate-y-1 opacity-0"
        enter-to-class="translate-y-0 opacity-100"
        leave-active-class="transition duration-150 ease-in"
        leave-from-class="translate-y-0 opacity-100"
        leave-to-class="translate-y-1 opacity-0"
      >
        <HeadlessPopoverPanel
          class="absolute z-10 px-2 py-2 rounded-lg min-w-[150px] bg-light-surface dark:bg-dark-surface border-light-secondary dark:border-dark-secondary border"
        >
          <div class="grid grid-cols-1">
            <template
              v-for="(child, j) in menu.children"
              :key="j"
            >
              <LayoutPageNavbarMenuItem
                :menu="child"
                is-dropdown
              />
            </template>
          </div>
        </HeadlessPopoverPanel>
      </Transition>
    </HeadlessPopover>
  </template>
</template>


=== components\Layouts\Page\Section\index.vue ===
<template>
  <div class="pt-2 mb-6">
    <slot />
  </div>
</template>


=== components\Layouts\Page\Section\Title.vue ===
<script lang="ts" setup>
defineProps({
  text: {
    type: String,
    default: '',
  },
})
</script>

<template>
  <div class="text-2xl font-semibold mb-2">
    <slot>{{ text }}</slot>
  </div>
</template>


=== components\Layouts\Page\Title.vue ===
<script lang="ts" setup>
defineProps({
  text: {
    type: String,
    default: '',
  },
})
</script>

<template>
  <div class="text-4xl font-bold">
    <slot>{{ text }}</slot>
  </div>
</template>


=== components\Layouts\Page\Wrapper.vue ===
<template>
  <div class="flex-1 py-4 max-w-screen-2xl w-full px-4 mx-auto">
    <slot />
  </div>
</template>


=== components\LoadingSpinner.vue ===
<template>
  <div class="flex items-center justify-center">
    <div class="animate-spin rounded-full border-t-2 border-b-2 border-light-primary dark:border-dark-primary h-8 w-8" />
  </div>
</template>


=== components\StatCard.vue ===
<script setup lang="ts">
defineProps<{
  value: number
  label: string
  icon: string
}>()
</script>

<template>
  <div class="bg-light-background dark:bg-dark-background p-4 rounded-lg">
    <div class="flex items-center justify-between mb-2">
      <Icon
        :name="icon"
        class="w-6 h-6 text-light-primary dark:text-dark-primary"
      />
      <span class="text-2xl font-bold text-light-primary dark:text-dark-primary">{{ value }}</span>
    </div>
    <div class="text-sm text-light-secondary dark:text-dark-secondary">
      {{ label }}
    </div>
  </div>
</template>


=== components\TabNavigation.vue ===
<script setup lang="ts">
interface Tab {
  id: string
  label: string
}

defineProps<{
  modelValue: string
  tabs: Tab[]
}>()

defineEmits<{
  'update:modelValue': [value: string]
}>()
</script>

<template>
  <div class="border-b border-light-secondary/20 dark:border-dark-secondary/20">
    <nav class="flex space-x-8">
      <button
        v-for="tab in tabs"
        :key="tab.id"
        class="px-1 py-4 border-b-2 font-medium text-sm transition-colors"
        :class="[
          modelValue === tab.id
            ? 'border-light-primary dark:border-dark-primary text-light-primary dark:text-dark-primary'
            : 'border-transparent text-light-secondary dark:text-dark-secondary hover:text-light-textbase dark:hover:text-dark-textbase',
        ]"
        @click="$emit('update:modelValue', tab.id)"
      >
        {{ tab.label }}
      </button>
    </nav>
  </div>
</template>


=== components\ToastNotification.vue ===
<script setup lang="ts">
interface Toast {
  id: number
  type: 'success' | 'error' | 'info' | 'warning'
  title: string
  message?: string
  timeout: number
}

const toasts = ref<Toast[]>([])
const timeouts = new Map<number, NodeJS.Timeout>()

const toastTypeClasses = {
  success: 'bg-light-success/10 text-light-success dark:bg-dark-success/10 dark:text-dark-success',
  error: 'bg-light-error/10 text-light-error dark:bg-dark-error/10 dark:text-dark-error',
  info: 'bg-light-info/10 text-light-info dark:bg-dark-info/10 dark:text-dark-info',
  warning: 'bg-light-warning/10 text-light-warning dark:bg-dark-warning/10 dark:text-dark-warning',
}

const toastTypeIcons = {
  success: 'mdi:check-circle',
  error: 'mdi:alert-circle',
  info: 'mdi:information',
  warning: 'mdi:alert',
}

const addToast = (toast: Omit<Toast, 'id' | 'timeout'>) => {
  const id = Date.now()
  const newToast = {
    ...toast,
    id,
    timeout: 5000,
  }

  toasts.value.push(newToast)
  startTimeout(newToast)
}

const removeToast = (id: number) => {
  const timeout = timeouts.get(id)
  if (timeout) {
    clearTimeout(timeout)
    timeouts.delete(id)
  }
  toasts.value = toasts.value.filter(t => t.id !== id)
}

const startTimeout = (toast: Toast) => {
  const timeout = setTimeout(() => {
    removeToast(toast.id)
  }, toast.timeout)
  timeouts.set(toast.id, timeout)
}

const pauseTimeout = (id: number) => {
  const timeout = timeouts.get(id)
  if (timeout) {
    clearTimeout(timeout)
  }
}

const resumeTimeout = () => {
  toasts.value.forEach(startTimeout)
}

onBeforeUnmount(() => {
  timeouts.forEach(clearTimeout)
})

// Expose the addToast method to be used by other components
defineExpose({ addToast })
</script>

<template>
  <div
    class="fixed bottom-4 right-4 z-50 space-y-2"
    @mouseleave="resumeTimeout"
  >
    <TransitionGroup name="toast">
      <div
        v-for="toast in toasts"
        :key="toast.id"
        class="flex items-center p-4 rounded-lg shadow-lg max-w-md transform transition-all duration-300"
        :class="toastTypeClasses[toast.type]"
        @mouseenter="pauseTimeout(toast.id)"
      >
        <Icon
          :name="toastTypeIcons[toast.type]"
          class="w-5 h-5 mr-3 flex-shrink-0"
        />
        <div class="flex-1">
          <div class="font-medium">
            {{ toast.title }}
          </div>
          <div
            v-if="toast.message"
            class="text-sm mt-1"
          >
            {{ toast.message }}
          </div>
        </div>
        <button
          class="ml-4 hover:opacity-80"
          @click="removeToast(toast.id)"
        >
          <Icon
            name="mdi:close"
            class="w-5 h-5"
          />
        </button>
      </div>
    </TransitionGroup>
  </div>
</template>

<style scoped>
.toast-enter-active,
.toast-leave-active {
  transition: all 0.3s ease;
}

.toast-enter-from {
  opacity: 0;
  transform: translateX(100%);
}

.toast-leave-to {
  opacity: 0;
  transform: translateX(100%);
}
</style>


=== components\UserManagement\AddUserModal.vue ===
<template>
  <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
    <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg w-full max-w-md">
      <h2 class="text-lg font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
        Add a New User
      </h2>

      <form
        class="space-y-4"
        @submit.prevent="submit"
      >
        <!-- First Name -->
        <FormField
          id="addUserFirstName"
          v-model="firstName"
          label="First Name"
          required
          placeholder="John"
          :error="errors.firstName"
          @input="errors.firstName = ''"
        />

        <!-- Last Name -->
        <FormField
          id="addUserLastName"
          v-model="lastName"
          label="Last Name"
          required
          placeholder="Doe"
          :error="errors.lastName"
          @input="errors.lastName = ''"
        />

        <!-- Email -->
        <FormField
          id="addUserEmail"
          v-model="email"
          label="Email"
          required
          placeholder="user@example.com"
          :error="errors.email"
          @input="errors.email = ''"
        />

        <!-- Global Role (Owner not selectable) -->
        <FormField
          id="addUserGlobalRole"
          v-model="globalRole"
          label="Global Role"
          type="select"
          :required="true"
        >
          <!-- We exclude Owner from the dropdown -->
          <option value="SuperAdmin">
            Super Admin
          </option>
          <option value="Contributor">
            Contributor
          </option>
          <option value="ReadOnly">
            Read Only
          </option>
        </FormField>

        <!-- Descriptions of roles for clarity -->
        <div class="mb-4 text-sm text-light-secondary dark:text-dark-secondary space-y-2">
          <p><strong>Owner</strong>: Automatically assigned to the account creator. Not selectable.</p>
          <p><strong>Super Admin</strong>: Full privileges across the entire application.</p>
          <p><strong>Contributor</strong>: Collaborates on tasks but does not have full admin rights.</p>
          <p><strong>Read Only</strong>: Has no system access and only access to projects and templates when specifically granted.</p>
        </div>

        <!-- IsActive checkbox -->
        <div class="flex items-center gap-2">
          <input
            id="addUserIsActive"
            v-model="isActive"
            type="checkbox"
            class="h-4 w-4 rounded border-light-secondary/20 dark:border-dark-secondary/20"
          >
          <label
            for="addUserIsActive"
            class="text-sm text-light-textbase dark:text-dark-textbase cursor-pointer"
          > Active User </label>
        </div>

        <!-- Buttons -->
        <div class="flex justify-end space-x-2 mt-6">
          <button
            type="button"
            class="px-4 py-2 text-light-secondary dark:text-dark-secondary hover:underline"
            @click="$emit('close')"
          >
            Cancel
          </button>
          <button
            :disabled="isPending"
            class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity disabled:opacity-50"
          >
            {{ isPending ? 'Adding...' : 'Add User' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useMutation, useQueryClient } from '@tanstack/vue-query'
import useUsers from '~/composables/use-user-service'
import { useToast } from '~/composables/use-toast-service'
import { type ICreateUserRequest, GlobalRoleType } from '~/types'

const emit = defineEmits<{
  (event: 'close' | 'added'): void
}>()

// Form fields
const firstName = ref('')
const lastName = ref('')
const email = ref('')
const globalRole = ref<GlobalRoleType>(GlobalRoleType.Contributor) // Default
const isActive = ref(true) // or false if you prefer they not be active by default

// Basic client-side errors for each required field
const errors = ref({
  firstName: '',
  lastName: '',
  email: '',
})

const { createUser } = useUsers()
const { showToast } = useToast()
const queryClient = useQueryClient()

// The create user mutation
const { mutate, isPending } = useMutation({
  mutationFn: async () => {
    // Build request
    const payload: ICreateUserRequest = {
      email: email.value,
      firstName: firstName.value,
      lastName: lastName.value,
      isActive: isActive.value,
      // Even if your backend requires a string, ensure you define
      // these fields in your ICreateUserRequest
      globalRole: globalRole.value,
      ssoId: '', // or some relevant property if needed
    }
    return await createUser(payload)
  },
  onSuccess: (response) => {
    if (response.isSuccess && response.data) {
      showToast({
        type: 'success',
        title: 'User Created',
        message: 'New user has been successfully created.',
      })
      queryClient.invalidateQueries({ queryKey: ['users'] })
      emit('added')
    }
    else {
      showToast({
        type: 'error',
        title: 'Creation Failed',
        message: response.message || 'Could not create user.',
      })
    }
  },
  onError: (error: Error) => {
    showToast({
      type: 'error',
      title: 'Creation Failed',
      message: error.message || 'Could not create user.',
    })
  },
})

// Validate required fields before calling mutate
function submit() {
  let valid = true

  if (!firstName.value.trim()) {
    errors.value.firstName = 'First name is required'
    valid = false
  }
  if (!lastName.value.trim()) {
    errors.value.lastName = 'Last name is required'
    valid = false
  }
  if (!email.value.trim()) {
    errors.value.email = 'Email is required'
    valid = false
  }
  else if (!isValidEmail(email.value)) {
    errors.value.email = 'Please enter a valid email'
    valid = false
  }

  if (!valid) return

  // if all validations pass
  mutate()
}

// Example email check
function isValidEmail(value: string): boolean {
  // Basic email check, can be replaced with something more robust
  return /\S+@\S+\.\S+/.test(value)
}
</script>

<style scoped>
/* Basic styling for your modal, adapt as you see fit */
</style>


=== components\UserManagement\Card.vue ===
<!-- components/UserManagementCard.vue -->
<template>
  <div class="flex items-center justify-between p-4 bg-light-background dark:bg-dark-background rounded-lg">
    <!-- Left: avatar + user info -->
    <div class="flex items-center space-x-4">
      <!-- Avatar -->
      <div class="relative">
        <Icon
          name="mdi:account-circle"
          class="w-10 h-10 text-light-secondary dark:text-dark-secondary"
        />
        <!-- Current User Dot -->
        <div
          v-if="isCurrentUser"
          class="absolute -top-1 -right-1 w-4 h-4 bg-light-success dark:bg-dark-success rounded-full border-2 border-light-background dark:border-dark-background"
          title="Current User"
        />
      </div>

      <!-- User Info -->
      <div>
        <div class="font-medium text-light-textbase dark:text-dark-textbase">
          {{ userCopy.email }}
        </div>
        <div class="flex flex-wrap items-center gap-2 text-sm">
          <span class="text-light-secondary dark:text-dark-secondary"> Joined {{ formattedCreatedDate }} </span>

          <!-- Tag to highlight if it’s you -->
          <span
            v-if="isCurrentUser"
            class="px-2 py-0.5 bg-light-success/10 dark:bg-dark-success/10 text-light-success dark:text-dark-success rounded-full text-xs"
          > You </span>

          <!-- If you store a role in your user object, show a small role tag -->
          <span
            v-if="userCopy.globalRole"
            class="px-2 py-0.5 bg-light-primary/10 dark:bg-dark-primary/10 text-light-primary dark:text-dark-primary rounded-full text-xs"
          >
            {{ formatUserRole(userCopy.globalRole) }}
          </span>
        </div>
      </div>
    </div>

    <!-- Right: actions -->
    <div class="flex items-center gap-4">
      <!-- Toggle isActive, calls updateUser with the entire user -->
      <div
        v-if="canManage && !isCurrentUser"
        class="flex items-center gap-2"
      >
        <Switch
          v-model="userCopy.isActive"
          :disabled="isUpdating"
          class="relative inline-flex h-6 w-11 items-center rounded-full cursor-pointer"
          :class="userCopy.isActive ? 'bg-light-success dark:bg-dark-success' : 'bg-light-secondary dark:bg-dark-secondary'"
          @update:model-value="handleIsActiveToggle"
        >
          <span
            class="inline-block h-4 w-4 transform bg-white rounded-full transition"
            :class="userCopy.isActive ? 'translate-x-6' : 'translate-x-1'"
          />
        </Switch>
        <span class="text-sm text-light-secondary dark:text-dark-secondary">
          {{ userCopy.isActive ? 'Active' : 'Inactive' }}
        </span>
      </div>

      <!-- Delete Button -->
      <button
        v-if="canManage && !isCurrentUser"
        class="text-light-error dark:text-dark-error hover:opacity-80 transition-opacity"
        title="Remove User"
        @click="$emit('remove', userCopy)"
      >
        <Icon
          name="mdi:trash-can-outline"
          class="w-5 h-5"
        />
      </button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, watchEffect } from 'vue'
import { useMutation, useQueryClient } from '@tanstack/vue-query'
import { useToast } from '~/composables/use-toast-service'
import useUsers from '~/composables/use-user-service'

import type { IUser } from '~/types'

const props = defineProps<{
  user: IUser
  canManage: boolean
  isCurrentUser: boolean
}>()

defineEmits<{
  remove: [user: IUser]
}>()

const { updateUser } = useUsers()
const { showToast } = useToast()
const queryClient = useQueryClient()

// We copy the prop into a local user ref so we can toggle isActive, etc.
const userCopy = ref<IUser>({ ...props.user })

watchEffect(() => {
  // Keep userCopy in sync with incoming prop changes (if any)
  userCopy.value = { ...props.user }
})

// Format date in a user-friendly manner
const formattedCreatedDate = computed(() => {
  return new Date(userCopy.value.createdDateTime).toLocaleDateString()
})

// If your user has a role string, you can transform/capitalize it
function formatUserRole(role: string) {
  return role.charAt(0).toUpperCase() + role.slice(1)
}

// Mutation to update the entire user object
const { mutate: doUpdateUser, isPending: isUpdating } = useMutation({
  // We’ll pass the new user object as the payload
  mutationFn: async (updatedUser: IUser) => {
    return await updateUser(updatedUser.id, updatedUser)
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ['users'] })
    showToast({
      type: 'success',
      title: 'User Updated',
      message: 'User changes have been saved.',
    })
  },
  onError: (error: Error) => {
    showToast({
      type: 'error',
      title: 'Update Failed',
      message: error.message ?? 'Could not update user.',
    })
  },
})

// Called when the Switch toggles isActive
function handleIsActiveToggle(newVal: boolean) {
  userCopy.value.isActive = newVal
  doUpdateUser(userCopy.value)
}
</script>

<style scoped>
/* Optional local styling */
</style>


=== components\UserManagement\EditModal.vue ===
<template>
  <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
    <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg w-full max-w-md">
      <h2 class="text-lg font-semibold mb-4 text-light-textbase dark:text-dark-textbase">
        Edit User
      </h2>

      <form @submit.prevent="submit">
        <FormField
          id="editUserEmail"
          v-model="localUser.email"
          label="Email"
          required
        />

        <!-- Add more fields here as desired (firstName, lastName, etc.) -->

        <div class="flex justify-end space-x-2 mt-6">
          <button
            type="button"
            class="px-4 py-2 text-light-secondary dark:text-dark-secondary hover:underline"
            @click="$emit('close')"
          >
            Cancel
          </button>
          <button
            :disabled="isPending"
            class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity disabled:opacity-50"
          >
            {{ isPending ? 'Saving...' : 'Save Changes' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, watchEffect } from 'vue'
import { useMutation, useQueryClient } from '@tanstack/vue-query'
import { useToast } from '~/composables/use-toast-service'
import useUsers from '~/composables/use-user-service'
import type { IUser } from '~/types'

const props = defineProps<{
  user: IUser
}>()

const emit = defineEmits(['close', 'updated'])

// Copy the user prop into local state
const localUser = ref({ ...props.user })

watchEffect(() => {
  localUser.value = { ...props.user }
})

const { updateUser } = useUsers()
const { showToast } = useToast()
const queryClient = useQueryClient()

const { mutate, isPending } = useMutation({
  mutationFn: async () => {
    // Pass the entire user object to your update method
    return await updateUser(localUser.value.id, localUser.value)
  },
  onSuccess: (response) => {
    if (response.isSuccess && response.data) {
      showToast({
        type: 'success',
        title: 'User Updated',
        message: 'User details have been saved.',
      })
      queryClient.invalidateQueries({ queryKey: ['users'] })
      emit('updated')
    }
    else {
      showToast({
        type: 'error',
        title: 'Update Failed',
        message: response.message || 'Could not update user.',
      })
    }
  },
  onError: (error: Error) => {
    showToast({
      type: 'error',
      title: 'Update Failed',
      message: error.message || 'Could not update user.',
    })
  },
})

function submit() {
  mutate()
}
</script>


=== components\UserManagement\Layout.vue ===
<template>
  <div class="flex flex-col min-h-screen">
    <!-- Insert a header or a nav if you want -->
    <slot name="main-content" />
    <slot name="side-content" />
  </div>
</template>

<script setup lang="ts">
// minimal layout, expand as needed
</script>

<style scoped>
/* Layout-level styles here */
</style>


=== components\UserManagement\List.vue ===
<template>
  <div class="p-4 sm:p-6 lg:p-8 space-y-6">
    <!-- Card Container -->
    <div class="bg-light-surface dark:bg-dark-surface p-6 rounded-lg shadow-sm">
      <!-- Header Section -->
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-light-textbase dark:text-dark-textbase">
          User Management
        </h2>

        <button
          v-if="canManageUsers"
          class="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-md hover:opacity-90 transition-opacity"
          @click="showAddUserModal = true"
        >
          Add User
        </button>
      </div>

      <!-- Loading State -->
      <div
        v-if="isLoading"
        class="py-8 text-center text-light-secondary dark:text-dark-secondary"
      >
        <LoadingSpinner />
      </div>

      <!-- Empty State -->
      <div
        v-else-if="users.length === 0"
        class="text-center py-8"
      >
        <Icon
          name="mdi:account-group-outline"
          class="w-16 h-16 mx-auto text-light-secondary dark:text-dark-secondary mb-2"
        />
        <p class="text-light-secondary dark:text-dark-secondary">
          No users found
        </p>
      </div>

      <!-- User List -->
      <div
        v-else
        class="space-y-4"
      >
        <UserManagementCard
          v-for="user in users"
          :key="user.id"
          :user="user"
          :can-manage="canManageUsers"
          :is-current-user="isCurrentUser(user.id)"
          @remove="handleUserRemove"
        />
      </div>
    </div>

    <!-- Add User Modal -->
    <UserManagementAddUserModal
      v-if="showAddUserModal"
      @close="showAddUserModal = false"
      @added="handleUserAdded"
    />

    <!-- Confirmation Modal -->
    <ConfirmationModal
      v-if="showRemoveConfirmation"
      title="Remove User"
      :message="removeConfirmationMessage"
      confirm-text="Remove"
      :is-processing="isRemoving"
      processing-text="Removing..."
      variant="danger"
      @confirm="confirmRemoveUser"
      @cancel="cancelRemoveUser"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { useQuery, useMutation, useQueryClient } from '@tanstack/vue-query'
import { useToast } from '~/composables/use-toast-service'

import type { IUser } from '~/types'
import useUsers from '~/composables/use-user-service'

// Composition
const { getAllUsers, deleteUser } = useUsers()
const { showToast } = useToast()
const queryClient = useQueryClient()

// Reactive state
const showAddUserModal = ref(false)
const showRemoveConfirmation = ref(false)
const userToRemove = ref<IUser | null>(null)

// Query to fetch users
const { data: usersData, isLoading } = useQuery({
  queryKey: ['users'],
  queryFn: () => getAllUsers(),
})

// Derived data
const users = computed(() => usersData.value?.data || [])
const canManageUsers = computed(() => true) // Replace with real permission logic

// Confirmation message
const removeConfirmationMessage = computed(() => {
  if (!userToRemove.value) return ''
  return `Are you sure you want to remove ${userToRemove.value.email}? This action cannot be undone.`
})

// Mutation to remove user
const { mutate: removeUser, isPending: isRemoving } = useMutation({
  mutationFn: async (userId: string) => {
    return await deleteUser(userId)
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ['users'] })
    showToast({
      type: 'success',
      title: 'User Removed',
      message: 'User has been removed successfully.',
    })
    showRemoveConfirmation.value = false
    userToRemove.value = null
  },
  onError: (error: Error) => {
    showToast({
      type: 'error',
      title: 'Removal Failed',
      message: error.message || 'Failed to remove user.',
    })
  },
})

// Methods
function isCurrentUser(userId: string) {
  // Replace with actual auth check or store logic
  return userId === 'current-user-id'
}

function handleUserRemove(user: IUser) {
  userToRemove.value = user
  showRemoveConfirmation.value = true
}

function confirmRemoveUser() {
  if (userToRemove.value) {
    removeUser(userToRemove.value.id)
  }
}

function cancelRemoveUser() {
  showRemoveConfirmation.value = false
  userToRemove.value = null
}

function handleUserAdded() {
  showAddUserModal.value = false
  // Re-fetch user list
  queryClient.invalidateQueries({ queryKey: ['users'] })
}
</script>

<style scoped>
/* Optional local styling */
</style>


=== composables\use-apiKeys-service.ts ===
import type { IApiKey, IApiResponse, IGenerateApiKeyRequest, IValidateApiKeyRequest } from '~/types'

export default function useApiKeys() {
  const config = useRuntimeConfig()
  const baseUrl = `${config.public.apiBaseUrl}/api/v1/apikeys`
  const { handleApiCall, createFetchOptions } = useApiUtils()

  const generateApiKey = (request: IGenerateApiKeyRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<{ apiKey: IApiKey, apiKeyString: string }>>(`${baseUrl}/generate`, {
        ...createFetchOptions<IApiResponse<{ apiKey: IApiKey, apiKeyString: string }>>(),
        method: 'POST',
        body: request,
      }),
      'generateApiKey',
    )
  }

  const getApiKeyById = (apiKeyId: string) => {
    return handleApiCall($fetch<IApiResponse<IApiKey>>(`${baseUrl}/${apiKeyId}`, createFetchOptions<IApiResponse<IApiKey>>()), 'getApiKeyById')
  }

  const getApiKeysByProjectId = (projectId: string) => {
    return handleApiCall($fetch<IApiResponse<IApiKey[]>>(`${baseUrl}/project/${projectId}`, createFetchOptions<IApiResponse<IApiKey[]>>()), 'getApiKeysByProjectId')
  }

  const validateApiKey = (request: IValidateApiKeyRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/validate`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'POST',
        body: request,
      }),
      'validateApiKey',
    )
  }

  const expireApiKey = (apiKeyId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/expire/${apiKeyId}`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'POST',
      }),
      'expireApiKey',
    )
  }

  const hasValidApiKey = (projectId: string) => {
    return handleApiCall($fetch<IApiResponse<boolean>>(`${baseUrl}/valid/${projectId}`, createFetchOptions<IApiResponse<boolean>>()), 'hasValidApiKey')
  }

  return {
    generateApiKey,
    getApiKeyById,
    getApiKeysByProjectId,
    validateApiKey,
    expireApiKey,
    hasValidApiKey,
  }
}


=== composables\use-apiUtils-service.ts ===
import type { FetchContext } from 'ofetch'
import type { NitroFetchOptions, NitroFetchRequest } from 'nitropack'

/**
 * Provides utilities for handling API calls and generating fetch options.
 */
export function useApiUtils() {
  return {
    /**
     * Wraps an API call in a try/catch/finally block with console logging.
     * When in development mode, it temporarily disables SSL verification before
     * the call and restores it afterward.
     *
     * @typeParam T - The expected type of the data resolved by the API call.
     * @param apiCall - A promise representing the API call.
     * @param actionName - A descriptive name for logging the request/action.
     * @returns A promise that resolves to the result of the `apiCall`.
     * @throws Rethrows any error caught during the API call.
     */
    handleApiCall: async <T>(apiCall: Promise<T>, actionName: string): Promise<T> => {
      try {
        console.log(`Starting ${actionName}`)

        // For development, temporarily disable SSL verification.
        if (process.env.NODE_ENV === 'development') {
          process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
        }

        const result = await apiCall
        console.log(`Completed ${actionName}`)
        return result
      }
      catch (error) {
        console.error(`Error in ${actionName}:`, error)
        throw error
      }
      finally {
        // Reset SSL verification for other calls.
        if (process.env.NODE_ENV === 'development') {
          process.env.NODE_TLS_REJECT_UNAUTHORIZED = '1'
        }
      }
    },

    /**
     * Creates a base configuration object for a Nitro fetch call.
     * This includes setting default headers and providing error logging
     * for both request and response errors.
     *
     * @typeParam ResponseType - The expected response type for the fetch calls.
     * @returns A typed `NitroFetchOptions` object that includes default
     * headers and error handling callbacks.
     */
    createFetchOptions: <ResponseType>(): NitroFetchOptions<
      NitroFetchRequest,
      'post' | 'get' | 'head' | 'patch' | 'put' | 'delete' | 'connect' | 'options' | 'trace'
    > => {
      return {
        headers: {
          'Content-Type': 'application/json',
        },

        // Called on response errors (e.g. non-2xx status codes).
        onResponseError(context: FetchContext<ResponseType>): void {
          const { request, response } = context
          const url = request instanceof Request ? request.url : String(request)
          console.error(`API Error: ${response?.status}`, { url })
        },

        // Called on request errors (e.g. network issues).
        onRequestError(context: FetchContext<ResponseType>): void {
          const { request, error } = context
          const url = request instanceof Request ? request.url : String(request)
          console.error(`Request Error: ${error?.message}`, { url })
        },
      } as NitroFetchOptions<
        NitroFetchRequest,
        'post' | 'get' | 'head' | 'patch' | 'put' | 'delete' | 'connect' | 'options' | 'trace'
      >
    },
  }
}


=== composables\use-containers-service.ts ===
import type { IApiResponse, IContainer, ICreateContainerRequest, IUpdateContainerRequest, IMoveContainerRequest } from '~/types'

export default function useContainers() {
  const config = useRuntimeConfig()
  const baseUrl = `${config.public.apiBaseUrl}/api/v1/containers`
  const { handleApiCall, createFetchOptions } = useApiUtils()

  const createContainer = (request: ICreateContainerRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IContainer>>(`${baseUrl}`, {
        ...createFetchOptions<IApiResponse<IContainer>>(),
        method: 'POST',
        body: request,
      }),
      'createContainer',
    )
  }

  const getContainerById = (containerId: string) => {
    return handleApiCall($fetch<IApiResponse<IContainer>>(`${baseUrl}/${containerId}`, createFetchOptions<IApiResponse<IContainer>>()), 'getContainerById')
  }

  const getContainersByProjectId = (projectId: string) => {
    return handleApiCall($fetch<IApiResponse<IContainer[]>>(`${baseUrl}/project/${projectId}`, createFetchOptions<IApiResponse<IContainer[]>>()), 'getContainersByProjectId')
  }

  const updateContainer = (containerId: string, request: IUpdateContainerRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IContainer>>(`${baseUrl}/${containerId}`, {
        ...createFetchOptions<IApiResponse<IContainer>>(),
        method: 'PUT',
        body: request,
      }),
      'updateContainer',
    )
  }

  const deleteContainer = (containerId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${containerId}`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'DELETE',
      }),
      'deleteContainer',
    )
  }

  const getChildContainers = (parentContainerId: string) => {
    return handleApiCall($fetch<IApiResponse<IContainer[]>>(`${baseUrl}/${parentContainerId}/children`, createFetchOptions<IApiResponse<IContainer[]>>()), 'getChildContainers')
  }

  const moveContainer = (containerId: string, request: IMoveContainerRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${containerId}/move`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'PUT',
        body: request,
      }),
      'moveContainer',
    )
  }

  return {
    createContainer,
    getContainerById,
    getContainersByProjectId,
    updateContainer,
    deleteContainer,
    getChildContainers,
    moveContainer,
  }
}


=== composables\use-local-time.ts ===
import { ref, type Ref } from 'vue'

/**
 * A composable for converting UTC dates/times into local time strings.
 */
export default function useLocalTime() {
  /**
   * A ref that holds the latest formatted local time string.
   */
  const localTime: Ref<string> = ref('')

  /**
   * Converts an ISO UTC datetime (string or Date) into the user's local time format.
   *
   * @param isoUtcDatetime - The UTC datetime to format (can be an ISO string, a Date object, or undefined).
   * @returns The formatted local time string. If `isoUtcDatetime` is not provided, returns an empty string.
   */
  const toLocalTime = (isoUtcDatetime: string | Date | undefined): string => {
    if (!isoUtcDatetime) {
      return ''
    }

    // Create a new Date object from the provided string or Date object.
    const date = new Date(isoUtcDatetime)

    // Define how the date should be formatted.
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true,
      timeZoneName: 'short',
    }

    // Format the date according to the user's locale and the specified options.
    localTime.value = new Intl.DateTimeFormat(undefined, options).format(date)

    return localTime.value
  }

  return {
    /**
     * Reactive string holding the latest local time formatting.
     */
    localTime,

    /**
     * Function that converts a provided UTC datetime into the local time format.
     */
    toLocalTime,
  }
}


=== composables\use-navbar-parser.ts ===
import type { RouteLocationRaw } from 'vue-router'
import type { NuxtApp } from '#app' // NuxtApp type
import { useNuxtApp } from '#app'

/**
 * Provides utility functions for parsing navigation bar routes and titles.
 */
export function useNavbarParser() {
  /**
   * Dynamically resolves a route location based on the provided `to` value.
   * If `to` is a function, it will be called with the current `NuxtApp` instance.
   * Otherwise, `to` is used directly if it's already a `RouteLocationRaw`.
   *
   * @param to - An optional `RouteLocationRaw` or function that takes `NuxtApp` and returns a `RouteLocationRaw`.
   * @returns A `RouteLocationRaw`, or `undefined` if none is provided.
   */
  const parseMenuRoute = (
    to?: RouteLocationRaw | ((nuxt: NuxtApp) => RouteLocationRaw),
  ): RouteLocationRaw | undefined => {
    const nuxtApp = useNuxtApp()
    return typeof to === 'function' ? to(nuxtApp) : to
  }

  /**
   * Processes the menu title. Currently just returns the same string.
   *
   * @param title - The menu title string.
   * @returns The unmodified `title`.
   */
  const parseMenuTitle = (title: string): string => {
    return title
  }

  return { parseMenuRoute, parseMenuTitle }
}


=== composables\use-permissions-service.ts ===
import type { IPermission, IApiResponse, ICreatePermissionRequest, IUpdatePermissionRequest, EntityType } from '~/types'

export default function usePermissions() {
  const config = useRuntimeConfig()
  const baseUrl = `${config.public.apiBaseUrl}/api/v1/permissions`
  const { handleApiCall, createFetchOptions } = useApiUtils()

  const createPermission = (request: ICreatePermissionRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IPermission>>(`${baseUrl}`, {
        ...createFetchOptions<IApiResponse<IPermission>>(),
        method: 'POST',
        body: request,
      }),
      'createPermission',
    )
  }

  const getPermission = (userId: string, entityId: string, entityType: EntityType) => {
    return handleApiCall($fetch<IApiResponse<IPermission>>(`${baseUrl}/${userId}/${entityId}/${entityType}`, createFetchOptions<IApiResponse<IPermission>>()), 'getPermission')
  }

  const getPermissionsByEntity = (entityId: string, entityType: EntityType) => {
    console.log('getPermissionsByEntity', entityId, entityType)
    return handleApiCall(
      $fetch<IApiResponse<IPermission[]>>(`${baseUrl}/entity/${entityId}/${entityType}`, createFetchOptions<IApiResponse<IPermission[]>>()),
      'getPermissionsByEntity',
    )
  }

  const updatePermission = (request: IUpdatePermissionRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IPermission>>(`${baseUrl}`, {
        ...createFetchOptions<IApiResponse<IPermission>>(),
        method: 'PUT',
        body: request,
      }),
      'updatePermission',
    )
  }

  const deletePermission = (userId: string, entityId: string, entityType: EntityType) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${userId}/${entityId}/${entityType}`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'DELETE',
      }),
      'deletePermission',
    )
  }

  return {
    createPermission,
    getPermission,
    getPermissionsByEntity,
    updatePermission,
    deletePermission,
  }
}


=== composables\use-phone-format.ts ===
// usePhoneFormat.ts
import { ref, watch, type Ref } from 'vue'

/**
 * A composable that formats a phone number string in the format:
 *   x (xxx) xxx-xxxx
 *
 * @param value - The initial phone number to format.
 * @returns An object containing `formattedPhoneValue`, which is a ref of the formatted phone number.
 */
export default function usePhoneFormat(value: string): { formattedPhoneValue: Ref<string> } {
  /**
   * A ref to store the formatted phone number.
   */
  const formattedPhoneValue = ref(value)

  /**
   * Takes a phone number string, removes any non-digit characters,
   * and formats it as x (xxx) xxx-xxxx.
   *
   * @param value - The raw phone number string to be formatted.
   */
  const formatPhoneNumber = (value: string): void => {
    // Remove all non-digit characters.
    let cleaned = value.replace(/\D/g, '')

    // Insert the formatting pattern if we have enough digits (1 + 3 + 3 + 4).
    cleaned = cleaned.replace(/(\d{1})(\d{3})(\d{3})(\d{4})/, '$1 ($2) $3-$4')

    // Limit to a maximum length of 16 characters (e.g., "9 (999) 999-9999").
    formattedPhoneValue.value = cleaned.trim().substring(0, 16)
  }

  /**
   * Watch for changes in `value`. Whenever `value` changes, reformat it.
   */
  watch(
    () => value,
    (newValue) => {
      formatPhoneNumber(newValue)
    },
  )

  // Initially format the phone number.
  formatPhoneNumber(value)

  return {
    /**
     * The reactive, formatted phone number string.
     */
    formattedPhoneValue,
  }
}


=== composables\use-projects-service.ts ===
import type {
  IApiResponse,
  IProject,
  IStage,
  ICreateProjectRequest,
  IUpdateProjectRequest,
  IAddUserToProjectRequest,
  IUpdateUserPermissionRequest,
  IAddStageToProjectRequest,
  IUpdateProjectStageRequest,
  IProjectKpis,
} from '~/types'

export default function useProjects() {
  const config = useRuntimeConfig()
  const { handleApiCall, createFetchOptions } = useApiUtils()

  const baseUrl = `${config.public.apiBaseUrl}/api/v1/projects`

  const createProject = (request: ICreateProjectRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IProject>>(`${baseUrl}`, {
        ...createFetchOptions<IApiResponse<IProject>>(),
        method: 'POST',
        body: request,
      }),
      'createProject',
    )
  }

  const getProjectKpis = (projectId: string) => {
    return handleApiCall($fetch<IApiResponse<IProjectKpis>>(`${baseUrl}/kpis?${projectId}`, createFetchOptions<IApiResponse<IProjectKpis>>()), 'getProjectKpis')
  }

  const getProjectById = (projectId: string) => {
    return handleApiCall($fetch<IApiResponse<IProject>>(`${baseUrl}/${projectId}`, createFetchOptions<IApiResponse<IProject>>()), 'getProjectById')
  }

  const getProjectsByUserId = (userId: string) => {
    return handleApiCall($fetch<IApiResponse<IProject[]>>(`${baseUrl}/user/${userId}`, createFetchOptions<IApiResponse<IProject[]>>()), 'getProjectsByUserId')
  }

  const updateProject = (projectId: string, request: IUpdateProjectRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IProject>>(`${baseUrl}/${projectId}`, {
        ...createFetchOptions<IApiResponse<IProject>>(),
        method: 'PUT',
        body: request,
      }),
      'updateProject',
    )
  }

  const deleteProject = (projectId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${projectId}`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'DELETE',
      }),
      'deleteProject',
    )
  }

  const addUserToProject = (projectId: string, request: IAddUserToProjectRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${projectId}/users`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'POST',
        body: request,
      }),
      'addUserToProject',
    )
  }

  const removeUserFromProject = (projectId: string, userId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${projectId}/users/${userId}`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'DELETE',
      }),
      'removeUserFromProject',
    )
  }

  const updateUserPermissionInProject = (projectId: string, userId: string, request: IUpdateUserPermissionRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${projectId}/users/${userId}/permission`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'PUT',
        body: request,
      }),
      'updateUserPermissionInProject',
    )
  }

  const getProjectStages = (projectId: string) => {
    return handleApiCall($fetch<IApiResponse<IStage[]>>(`${baseUrl}/${projectId}/stages`, createFetchOptions<IApiResponse<IStage[]>>()), 'getProjectStages')
  }

  const addStageToProject = (projectId: string, request: IAddStageToProjectRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IStage>>(`${baseUrl}/${projectId}/stages`, {
        ...createFetchOptions<IApiResponse<IStage>>(),
        method: 'POST',
        body: request,
      }),
      'addStageToProject',
    )
  }

  const removeStageFromProject = (projectId: string, stageId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${projectId}/stages/${stageId}`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'DELETE',
      }),
      'removeStageFromProject',
    )
  }

  const updateProjectStage = (projectId: string, stageId: string, request: IUpdateProjectStageRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IStage>>(`${baseUrl}/${projectId}/stages/${stageId}`, {
        ...createFetchOptions<IApiResponse<IStage>>(),
        method: 'PUT',
        body: request,
      }),
      'updateProjectStage',
    )
  }

  return {
    createProject,
    getProjectKpis,
    getProjectById,
    getProjectsByUserId,
    updateProject,
    deleteProject,
    addUserToProject,
    removeUserFromProject,
    updateUserPermissionInProject,
    getProjectStages,
    addStageToProject,
    removeStageFromProject,
    updateProjectStage,
  }
}


=== composables\use-screen.ts ===
import { ref, reactive, onMounted, onUnmounted, type Ref } from 'vue'

/**
 * A type representing valid screen size labels.
 */
export type ScreenSize = 'sm' | 'md' | 'lg' | 'xl'

/**
 * Maps each screen size label to a numeric pixel width threshold.
 * (When screen width is below that threshold, we consider it that size.)
 */
export const defaultScreenConfig: { [key in ScreenSize]: number } = {
  sm: 640,
  md: 768,
  lg: 1024,
  xl: 1280,
}

/**
 * A composable for tracking screen dimensions (width/height)
 * and determining the current screen size category (e.g., 'sm', 'md').
 */
export const useScreen = () => {
  /**
   * A reactive state object holding the browser window's current width and height.
   */
  const screenSize = reactive({
    width: 0,
    height: 0,
  })

  /**
   * A ref for storing the current screen size category ('sm', 'md', 'lg', or 'xl').
   */
  const current: Ref<ScreenSize> = ref('sm')

  /**
   * Determines the screen size category based on a provided (or the current) width.
   *
   * @param width - Optional width in pixels to use for checking size; if not provided,
   *                uses `screenSize.width`.
   * @returns The determined `ScreenSize` category.
   */
  const getSize = (width?: number): ScreenSize => {
    if (width === undefined) {
      width = screenSize.width
    }
    const { sm, md, lg, xl } = defaultScreenConfig
    if (width < sm) return 'sm'
    if (width < md) return 'md'
    if (width < lg) return 'lg'
    if (width < xl) return 'xl'
    return 'xl'
  }

  /**
   * Handler that updates the reactive `screenSize` with the current
   * browser window dimensions, then re-evaluates `current` screen size.
   */
  const onWindowResize = (): void => {
    const { innerWidth, innerHeight } = window
    screenSize.width = innerWidth
    screenSize.height = innerHeight
    current.value = getSize()
  }

  /**
   * Checks if the provided screen size (`size`) is less than or equal to
   * the current or optionally specified `defScreenSize`.
   *
   * @param size - A screen size label to compare against.
   * @param defScreenSize - (Optional) A screen size label to compare to instead of `current.value`.
   * @returns True if the `current` or given size threshold is >= `size`; otherwise false.
   */
  const higherThan = (size: ScreenSize, defScreenSize?: ScreenSize): boolean => {
    const { sm, md, lg, xl } = defaultScreenConfig
    const width = defaultScreenConfig[defScreenSize || current.value]

    if (size === 'sm') return width >= sm
    if (size === 'md') return width >= md
    if (size === 'lg') return width >= lg
    if (size === 'xl') return width >= xl
    return false
  }

  /**
   * Registers event listeners when the component is mounted.
   * Updates `current` with the initial screen size.
   */
  onMounted(() => {
    if (typeof window === 'undefined') return
    window.addEventListener('resize', onWindowResize)
    current.value = getSize(window.innerWidth)
  })

  /**
   * Cleans up event listeners when the component is unmounted.
   */
  onUnmounted(() => {
    if (typeof window === 'undefined') return
    window.removeEventListener('resize', onWindowResize)
  })

  return {
    /**
     * A function that returns a `ScreenSize` category based on
     * an optional width or the current `screenSize.width`.
     */
    getSize,
    /**
     * Reactive object containing the current `width` and `height` of the browser window.
     */
    screenSize,
    /**
     * A ref of type `ScreenSize`, representing the current screen category.
     */
    current,
    /**
     * A function that checks whether a screen size is >= a given threshold.
     */
    higherThan,
  }
}


=== composables\use-sync-props.ts ===
import { computed } from 'vue'
import type { WritableComputedRef } from 'vue'

/**
 * Syncs a prop with local state, emitting the standard Vue "update:<propName>" event on set.
 *
 * @template T  The type of the entire props object.
 * @template K  A key of T, so the computed ref will be the correct type T[K].
 *
 * @param props The props object.
 * @param key   The name of the prop to sync.
 * @param emit  The emit function, typically from setup()'s context.emit.
 * @returns     A two-way computed ref that reads from props[key] and emits on write.
 */
export function useSyncProps<
  T extends Record<string, unknown>,
  K extends keyof T,
>(
  props: T,
  key: K,
  emit: (event: `update:${string}`, value: T[K]) => void,
): WritableComputedRef<T[K]> {
  return computed({
    get() {
      return props[key]
    },
    set(value) {
      emit(`update:${String(key)}`, value)
    },
  })
}


=== composables\use-templates-service.ts ===
import type {
  IApiResponse,
  ITemplate,
  ITemplateVersion,
  ICreateTemplateRequest,
  ICreateVersionRequest,
  IAssignVersionToStageRequest,
  IRemoveVersionFromStageRequest,
} from '~/types'

export default function useTemplates() {
  const config = useRuntimeConfig()
  const baseUrl = `${config.public.apiBaseUrl}/api/v1/templates`
  const { handleApiCall, createFetchOptions } = useApiUtils()

  const createTemplate = (request: ICreateTemplateRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<ITemplate>>(`${baseUrl}`, {
        ...createFetchOptions<IApiResponse<ITemplate>>(),
        method: 'POST',
        body: request,
      }),
      'createTemplate',
    )
  }

  const getTemplateById = (templateId: string) => {
    return handleApiCall($fetch<IApiResponse<ITemplate>>(`${baseUrl}/${templateId}`, createFetchOptions<IApiResponse<ITemplate>>()), 'getTemplateById')
  }

  const getTemplatesByProjectId = (projectId: string) => {
    return handleApiCall($fetch<IApiResponse<ITemplate[]>>(`${baseUrl}/project/${projectId}`, createFetchOptions<IApiResponse<ITemplate[]>>()), 'getTemplatesByProjectId')
  }

  const getTemplatesByContainerId = (containerId: string) => {
    return handleApiCall($fetch<IApiResponse<ITemplate[]>>(`${baseUrl}/container/${containerId}`, createFetchOptions<IApiResponse<ITemplate[]>>()), 'getTemplatesByContainerId')
  }

  const getLatestVersion = (templateId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<ITemplateVersion>>(`${baseUrl}/${templateId}/latest-version`, createFetchOptions<IApiResponse<ITemplateVersion>>()),
      'getLatestVersion',
    )
  }

  const getAllVersions = (templateId: string) => {
    return handleApiCall($fetch<IApiResponse<ITemplateVersion[]>>(`${baseUrl}/${templateId}/versions`, createFetchOptions<IApiResponse<ITemplateVersion[]>>()), 'getAllVersions')
  }

  const createNewVersion = (templateId: string, request: ICreateVersionRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<ITemplateVersion>>(`${baseUrl}/${templateId}/versions`, {
        ...createFetchOptions<IApiResponse<ITemplateVersion>>(),
        method: 'POST',
        body: request,
      }),
      'createNewVersion',
    )
  }

  const assignVersionToStage = (templateVersionId: string, request: IAssignVersionToStageRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/versions/${templateVersionId}/assign`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'POST',
        body: request,
      }),
      'assignVersionToStage',
    )
  }

  const removeVersionFromStage = (templateVersionId: string, request: IRemoveVersionFromStageRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/versions/${templateVersionId}/unassign`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'DELETE',
        body: request,
      }),
      'removeVersionFromStage',
    )
  }

  const getVersionAssignedToStage = (templateId: string, stageId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<ITemplateVersion>>(`${baseUrl}/${templateId}/stage/${stageId}`, createFetchOptions<IApiResponse<ITemplateVersion>>()),
      'getVersionAssignedToStage',
    )
  }

  return {
    createTemplate,
    getTemplateById,
    getTemplatesByProjectId,
    getTemplatesByContainerId,
    getLatestVersion,
    getAllVersions,
    createNewVersion,
    assignVersionToStage,
    removeVersionFromStage,
    getVersionAssignedToStage,
  }
}


=== composables\use-toast-service.ts ===
import { ref, type Ref } from 'vue'

/**
 * Represents the supported options for displaying a toast.
 */
export interface ToastOptions {
  type: 'success' | 'error' | 'info' | 'warning'
  title: string
  message?: string
}

/**
 * Defines the shape of the toast component or object
 * that exposes an `addToast` method.
 */
export interface ToastRef {
  /**
   * Displays a new toast message based on the given options.
   */
  addToast(options: ToastOptions): void
}

/**
 * A composable to manage toast notifications via a `toastRef`.
 */
export function useToast() {
  /**
   * A reference to the toast component or object that can
   * display new toast messages.
   */
  const toastRef: Ref<ToastRef | undefined> = ref()

  /**
   * Displays a toast using the provided options. If `toastRef`
   * is set, it calls `addToast` on the underlying instance.
   *
   * @param options - An object containing information about the toast
   */
  const showToast = (options: ToastOptions): void => {
    if (toastRef.value) {
      toastRef.value.addToast(options)
    }
  }

  return {
    toastRef,
    showToast,
  }
}


=== composables\use-user-service.ts ===
import type { EntityType, IApiResponse, ICreateUserRequest, IPermission, IUpdateUserRequest, IUser } from '~/types'

export default function useUsers() {
  const config = useRuntimeConfig()
  const { handleApiCall, createFetchOptions } = useApiUtils()

  const baseUrl = `${config.public.apiBaseUrl}/api/v1/users`

  const createUser = (request: ICreateUserRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IUser>>(`${baseUrl}`, {
        ...createFetchOptions<IApiResponse<IUser>>(),
        method: 'POST',
        body: request,
      }),
      'createUser',
    )
  }

  const getUserById = (userId: string) => {
    return handleApiCall($fetch<IApiResponse<IUser>>(`${baseUrl}/${userId}`, createFetchOptions<IApiResponse<IUser>>()), 'getUserById')
  }

  const getUserBySsoId = (ssoId: string) => {
    return handleApiCall($fetch<IApiResponse<IUser>>(`${baseUrl}/sso/${ssoId}`, createFetchOptions<IApiResponse<IUser>>()), 'getUserBySsoId')
  }

  const getUserByEmail = (email: string) => {
    return handleApiCall($fetch<IApiResponse<IUser>>(`${baseUrl}/email/${email}`, createFetchOptions<IApiResponse<IUser>>()), 'getUserByEmail')
  }

  const getAllUsers = () => {
    return handleApiCall($fetch<IApiResponse<IUser[]>>(`${baseUrl}`, createFetchOptions<IApiResponse<IUser[]>>()), 'getAllUsers')
  }

  const updateUser = (userId: string, request: IUpdateUserRequest) => {
    return handleApiCall(
      $fetch<IApiResponse<IUser>>(`${baseUrl}/${userId}`, {
        ...createFetchOptions<IApiResponse<IUser>>(),
        method: 'PUT',
        body: request,
      }),
      'updateUser',
    )
  }

  const deleteUser = (userId: string) => {
    return handleApiCall(
      $fetch<IApiResponse<boolean>>(`${baseUrl}/${userId}`, {
        ...createFetchOptions<IApiResponse<boolean>>(),
        method: 'DELETE',
      }),
      'deleteUser',
    )
  }

  const getUserPermissions = (userId: string) => {
    return handleApiCall($fetch<IApiResponse<IPermission[]>>(`${baseUrl}/${userId}/permissions`, createFetchOptions<IApiResponse<IPermission[]>>()), 'getUserPermissions')
  }

  const searchUsers = (searchTerm: string) => {
    return handleApiCall(
      $fetch<IApiResponse<IUser[]>>(`${baseUrl}/search?searchTerm=${encodeURIComponent(searchTerm)}`, createFetchOptions<IApiResponse<IUser[]>>()),
      'searchUsers',
    )
  }

  const getUsersWithEntityPermissions = (entityId: string, entityType: EntityType) => {
    return handleApiCall(
      $fetch<IApiResponse<IUser[]>>(`${baseUrl}/entity/${entityType}/${entityId}/permissions`, createFetchOptions<IApiResponse<IUser[]>>()),
      'getUsersWithEntityPermissions',
    )
  }

  return {
    createUser,
    getUserById,
    getUserBySsoId,
    getUserByEmail,
    getAllUsers,
    updateUser,
    deleteUser,
    getUserPermissions,
    searchUsers,
    getUsersWithEntityPermissions,
  }
}


=== layouts\Default.vue ===
<script setup lang="ts">
const currentYear = new Date().getFullYear()
</script>

<template>
  <div class="flex flex-col min-h-screen bg-light-background dark:bg-dark-background text-light-textbase dark:text-dark-textbase">
    <!-- Sticky Navbar -->
    <LayoutPageNavbar class="sticky top-0 z-30 flex-shrink-0 bg-light-surface dark:bg-dark-surface">
      <template #title>
        <NuxtLink
          to="/"
          class="flex items-center space-x-2"
        >
          <img
            alt="CommuniQueue Logo"
            src="/assets/images/communiqueueLogo.png"
            class="h-10 w-auto object-contain"
          >
          <span
            class="font-extrabold text-xl bg-gradient-to-r from-light-primary to-light-accent dark:from-dark-primary dark:to-dark-accent bg-clip-text text-transparent transition-colors duration-300 ease-in-out hover:from-light-accent hover:to-light-primary dark:hover:from-dark-accent dark:hover:to-dark-primary"
          >
            Communi<span class="text-light-accent dark:text-dark-accent">Queue</span>
          </span>
        </NuxtLink>
      </template>
    </LayoutPageNavbar>

    <!-- Main Content - now takes up full width -->
    <div class="flex-grow overflow-auto">
      <slot />
    </div>

    <!-- Sticky Footer -->
    <LayoutPageFooter
      :app-name="'CommuniQueue'"
      :year="currentYear"
      name="Battleline Productions"
      class="sticky bottom-0 z-30 bg-light-surface dark:bg-dark-surface"
    />
  </div>
</template>


=== pages\accountSettings\index.vue ===
<template>
  <h1>Account Settings</h1>
</template>

<script setup lang="ts"></script>


=== pages\dashboard\projects\index.vue ===
<template>
  <DashboardProjectLayout>
    <template #main-content>
      <div class="p-4 sm:p-6 lg:p-8">
        <DashboardProjectList />
      </div>
    </template>
    <template #side-content>
      <div class="p-4 sm:p-6 lg:p-8">
        <!-- Side content, if any -->
      </div>
    </template>
  </DashboardProjectLayout>
</template>

<script setup lang="ts">

</script>


=== pages\dashboard\projects\[id]\manage.vue ===
<template>
  <div class="project-management p-6">
    <div class="mb-6">
      <h1 class="text-2xl font-bold text-light-textbase dark:text-dark-textbase">
        Project Management
      </h1>
    </div>

    <TabNavigation
      v-model="activeTab"
      :tabs="tabs"
    />

    <div class="mt-6">
      <DashboardProjectDetails
        v-if="activeTab === 'general'"
        :project="project!"
      />
      <DashboardAccess
        v-else-if="activeTab === 'access'"
        :project="project!"
      />
      <!-- <ProjectApiKeys
        v-else-if="activeTab === 'api'"
        :project="project"
      /> -->
    </div>
    <ToastNotification ref="toastRef" />
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useQuery } from '@tanstack/vue-query'
import useProjects from '~/composables/use-projects-service'

const route = useRoute()
const projectId = route.params.id as string
const { getProjectById } = useProjects()
const { toastRef } = useToast()

const tabs = [
  { id: 'general', label: 'General' },
  { id: 'access', label: 'Access Control' },
  { id: 'api', label: 'API Keys' },
]

const activeTab = ref('general')

const { data: projectData } = useQuery({
  queryKey: ['project', projectId],
  queryFn: () => getProjectById(projectId),
})

const project = computed(() => projectData.value?.data)

// const handleProjectUpdated = () => {
//   showToast({
//     type: 'success',
//     title: 'Project Updated',
//     message: 'Project details have been successfully updated.'
//   });
// };

// const handleUserAdded = () => {
//   showToast({
//     type: 'success',
//     title: 'Team Member Added',
//     message: 'New team member has been successfully added to the project.'
//   });
// };

// const handleUserRemoved = () => {
//   showToast({
//     type: 'info',
//     title: 'Team Member Removed',
//     message: 'Team member has been removed from the project.'
//   });
// };

// const handleKeyGenerated = () => {
//   showToast({
//     type: 'success',
//     title: 'API Key Generated',
//     message: 'New API key has been successfully generated.'
//   });
// };

// const handleKeyExpired = () => {
//   showToast({
//     type: 'info',
//     title: 'API Key Expired',
//     message: 'The API key has been expired successfully.'
//   });
// };
</script>


=== pages\features.vue ===
<template>
  <h1>CommuniQueue Features</h1>
</template>

<script setup lang="ts"></script>


=== pages\index.vue ===
<script setup></script>

<template>
  <LayoutPageWrapper class="flex-1 flex relative">
    <!-- Center Content -->
    <div class="flex-1 z-10">
      <!-- Hero Section -->
      <HomePageHero />

      <!-- Features Section -->
      <HomePageFeatures />

      <!-- Call To Action Section -->
      <HomePageCta />
    </div>
  </LayoutPageWrapper>
</template>

<style lang="scss">
:root {
  --padding: 0.05em;
}

@keyframes anim-fg-1 {
  0%,
  16.667%,
  100% {
    opacity: 1;
  }
  33.333%,
  83.333% {
    opacity: 0;
  }
}
@keyframes anim-fg-2 {
  0%,
  16.667%,
  66.667%,
  100% {
    opacity: 0;
  }
  33.333%,
  50% {
    opacity: 1;
  }
}
@keyframes anim-fg-3 {
  0%,
  50%,
  100% {
    opacity: 0;
  }
  66.667%,
  83.333% {
    opacity: 1;
  }
}
.animated-text-bg {
  position: relative;
  display: block;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  content: var(--content);
  display: block;
  width: 100%;
  color: theme('colors.slate.200');
  top: 0;
  bottom: 0;
  left: 0;
  z-index: 0;
  padding-left: var(--padding);
  padding-right: var(--padding);
  &:before {
    content: var(--content);
    position: absolute;
    display: block;
    width: 100%;
    color: theme('colors.slate.100');
    top: 0;
    bottom: 0;
    left: 0;
    z-index: 0;
    padding-left: var(--padding);
    padding-right: var(--padding);
  }
}
.animated-text-fg {
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  padding-left: var(--padding);
  padding-right: var(--padding);
  background-image: linear-gradient(90deg, var(--start-color), var(--end-color));
  position: relative;
  opacity: 0;
  z-index: 1;
  animation: var(--animation-name) 8s infinite;
}
html.dark {
  .animated-text-bg {
    color: theme('colors.gray.100');
    &:before {
      color: theme('colors.gray.100');
    }
  }
}
</style>


=== pages\userManagement\index.vue ===
<!-- pages/userManagement/index.vue -->
<template>
  <UserManagementLayout>
    <template #main-content>
      <UserManagementList />
    </template>

    <template #side-content>
      <div class="p-4 sm:p-6 lg:p-8">
        <!-- Any optional side content or help tips can go here -->
        <p class="text-light-secondary dark:text-dark-secondary">
          Manage your users here. Add new members or remove existing ones.
        </p>
      </div>
    </template>
  </UserManagementLayout>
</template>

<script setup lang="ts">
// No logic needed, just references the layout & child
</script>

<style scoped>
/* Minimal styling or none if you prefer */
</style>


=== types\enums\EntityType.ts ===
export enum EntityType {
  Application = 'Application',
  Project = 'Project',
  Container = 'Container',
  Template = 'Template',
}


=== types\enums\GlobalRoleType.ts ===
export enum GlobalRoleType {
  Owner = 'Owner',
  SuperAdmin = 'SuperAdmin',
  Contributor = 'Contributor',
  ReadOnly = 'ReadOnly',
}


=== types\enums\PermissionLevel.ts ===
export enum PermissionLevel {
  ReadOnly = 'ReadOnly',
  Contributor = 'Contributor',
  Admin = 'Admin',
  SuperAdmin = 'SuperAdmin',
}


=== types\generic\IApiResponse.ts ===
export interface IApiResponse<T> {
  data: T | null
  isSuccess: boolean
  status: number
  errors: string[]
  message: string
}


=== types\generic\LayoutPageNavbarMenu.ts ===
import type { NuxtApp } from 'nuxt/schema'
import type { RouteLocationRaw } from '#vue-router'
import type { LayoutPageNavbarMenuDropdownItem } from '~/types'

export interface LayoutPageNavbarMenu {
  type?: 'link' | 'button' | 'dropdown'
  shouldRequireAuth?: boolean
  title?: string | ((nuxt: NuxtApp) => string)
  to?: RouteLocationRaw | ((nuxt: NuxtApp) => RouteLocationRaw)
  children?: LayoutPageNavbarMenuDropdownItem[]
}


=== types\generic\LayoutPageNavbarMenuDropdownItem.ts ===
import type { NuxtApp } from 'nuxt/schema'
import type { RouteLocationRaw } from '#vue-router'

export interface LayoutPageNavbarMenuDropdownItem {
  type?: 'link'
  title?: string | ((nuxt: NuxtApp) => string)
  shouldRequireAuth?: boolean
  to?: RouteLocationRaw | ((nuxt: NuxtApp) => RouteLocationRaw)
  children?: LayoutPageNavbarMenuDropdownItem[]
}


=== types\index.ts ===
// Enums
export * from './enums/EntityType'
export * from './enums/PermissionLevel'
export * from './enums/GlobalRoleType'

// Api Key Requests
export * from './requests/apiKey/IGenerateApiKeyRequest'
export * from './requests/apiKey/IValidateApiKeyRequest'

// Container Request
export * from './requests/container/ICreateContainerRequest'
export * from './requests/container/IMoveContainerRequest'
export * from './requests/container/IUpdateContainerRequest'

// Project Request
export * from './requests/project/IAddStageToProjectRequest'
export * from './requests/project/IAddUserToProjectRequest'
export * from './requests/project/ICreateProjectRequest'
export * from './requests/project/IUpdateProjectRequest'
export * from './requests/project/IUpdateProjectStageRequest'
export * from './requests/project/IUpdateUserPermissionRequest'

// Template Request
export * from './requests/template/ICreateTemplateRequest'
export * from './requests/template/ICreateVersionRequest'
export * from './requests/template/IAssignVersionToStageRequest'
export * from './requests/template/IRemoveVersionFromStageRequest'

// Permission Request
export * from './requests/permission/ICreatePermissionRequest'
export * from './requests/permission/IUpdatePermissionRequest'

// User Request
export * from './requests/user/ICreateUserRequest'
export * from './requests/user/IUpdateUserRequest'

// Models
export * from './models/IApiKey'
export * from './generic/IApiResponse'
export * from './models/IContainer'
export * from './models/IPermission'
export * from './models/IProject'
export * from './models/IStage'
export * from './models/ITemplate'
export * from './models/ITemplateStageAssignment'
export * from './models/ITemplateVersion'
export * from './models/IUser'

// Kpis
export * from './Kpis/IProjectKpis'

// generics
export * from './generic/LayoutPageNavbarMenu'
export * from './generic/LayoutPageNavbarMenuDropdownItem'


=== types\Kpis\IProjectKpis.ts ===
export interface IProjectKpis {
  templateCount: number
  containerCount: number
  stageCount: number
}


=== types\models\IApiKey.ts ===
import type { IProject } from '~/types'

export interface IApiKey {
  id: string // Guid in C#
  keyHash: string
  projectId: string // Guid in C#
  project?: IProject
  createdDateTime: Date
  updatedDateTime: Date
  startDate: Date
  endDate: Date
  isExpired: boolean
  scopes: string[]
}


=== types\models\IContainer.ts ===
import type { IProject, ITemplate } from '~/types'

export interface IContainer {
  id: string // Guid in C#
  name: string
  description: string | null
  projectId: string // Guid in C#
  parentId: string | null // Guid? in C#
  parent?: IContainer
  children: IContainer[]
  project?: IProject
  templates: ITemplate[]
  isRoot: boolean
  createdDateTime: Date
  updatedDateTime: Date
}


=== types\models\IPermission.ts ===
import type { EntityType, IProject, IUser, PermissionLevel } from '~/types'

export interface IPermission {
  id: string // Guid in C#
  userId: string // Guid in C#
  entityId: string // Guid in C#
  entityType: EntityType
  permissionLevel: PermissionLevel
  user?: IUser
  project?: IProject | null
  createdDateTime: Date
  updatedDateTime: Date
}


=== types\models\IProject.ts ===
import type { IContainer, IPermission, IStage, ITemplate } from '~/types'

export interface IProject {
  id: string // Guid in C#
  name: string
  description: string | null
  customerId: string | null
  rootContainerId: string // Guid in C#
  rootContainer: IContainer
  stages: IStage[]
  containers: IContainer[]
  templates: ITemplate[]
  permissions: IPermission[]
  createdDateTime: Date
  updatedDateTime: Date
}


=== types\models\IStage.ts ===
import type { IProject } from '~/types'

export interface IStage {
  id: string // Guid in C#
  name: string
  order: number
  projectId: string // Guid in C#
  project?: IProject
  createdDateTime: Date
  updatedDateTime: Date
}


=== types\models\ITemplate.ts ===
import type { IContainer, IProject, ITemplateVersion } from '~/types'

export interface ITemplate {
  id: string // Guid in C#
  name: string
  projectId: string // Guid in C#
  project?: IProject
  containerId: string // Guid in C#
  container?: IContainer
  versions: ITemplateVersion[]
  createdDateTime: Date
  updatedDateTime: Date
}


=== types\models\ITemplateStageAssignment.ts ===
import type { IStage, ITemplateVersion } from '~/types'

export interface ITemplateStageAssignment {
  id: string // Guid in C#
  templateVersionId: string // Guid in C#
  templateVersion?: ITemplateVersion
  stageId: string // Guid in C#
  stage?: IStage
  createdDateTime: Date
  updatedDateTime: Date
}


=== types\models\ITemplateVersion.ts ===
import type { ITemplate, ITemplateStageAssignment } from '~/types'

export interface ITemplateVersion {
  id: string // Guid in C#
  versionNumber: number
  subject: string
  body: string
  templateId: string // Guid in C#
  template?: ITemplate
  stageAssignments: ITemplateStageAssignment[]
  createdDateTime: Date
  updatedDateTime: Date
}


=== types\models\IUser.ts ===
import type { GlobalRoleType, IPermission } from '~/types'

export interface IUser {
  id: string // Guid in C#
  createdDateTime: Date
  updatedDateTime: Date
  email: string
  ssoId: string
  firstName: string
  lastName: string
  isActive: boolean
  globalRole: GlobalRoleType
  permissions?: IPermission[]
}


=== types\requests\apiKey\IGenerateApiKeyRequest.ts ===
export interface IGenerateApiKeyRequest {
  projectId: string
  startDate: string
  endDate: string
  scopes: string[]
}


=== types\requests\apiKey\IValidateApiKeyRequest.ts ===
export interface IValidateApiKeyRequest {
  apiKey: string
}


=== types\requests\container\ICreateContainerRequest.ts ===
export interface ICreateContainerRequest {
  name: string
  description: string
  projectId: string
  parentContainerId?: string
}


=== types\requests\container\IMoveContainerRequest.ts ===
export interface IMoveContainerRequest {
  newParentContainerId?: string
}


=== types\requests\container\IUpdateContainerRequest.ts ===
export interface IUpdateContainerRequest {
  name: string
  description: string
}


=== types\requests\permission\ICreatePermissionRequest.ts ===
import type { EntityType, PermissionLevel } from '~/types'

export interface ICreatePermissionRequest {
  userId: string
  entityId: string
  entityType: EntityType
  permissionLevel: PermissionLevel
}


=== types\requests\permission\IUpdatePermissionRequest.ts ===
import type { EntityType, PermissionLevel } from '~/types'

export interface IUpdatePermissionRequest {
  userId: string
  entityId: string
  entityType: EntityType
  newPermissionLevel: PermissionLevel
}


=== types\requests\project\IAddStageToProjectRequest.ts ===
export interface IAddStageToProjectRequest {
  name: string
  order: number
}


=== types\requests\project\IAddUserToProjectRequest.ts ===
import type { PermissionLevel } from '~/types'

export interface IAddUserToProjectRequest {
  userId: string
  permissionLevel: PermissionLevel
}


=== types\requests\project\ICreateProjectRequest.ts ===
export interface ICreateProjectRequest {
  name: string
  description: string
  ownerId: string
}


=== types\requests\project\IUpdateProjectRequest.ts ===
export interface IUpdateProjectRequest {
  name: string
  description: string
}


=== types\requests\project\IUpdateProjectStageRequest.ts ===
export interface IUpdateProjectStageRequest {
  name: string
  order: number
}


=== types\requests\project\IUpdateUserPermissionRequest.ts ===
import type { PermissionLevel } from '~/types'

export interface IUpdateUserPermissionRequest {
  newPermissionLevel: PermissionLevel
}


=== types\requests\template\IAssignVersionToStageRequest.ts ===
export interface IAssignVersionToStageRequest {
  stageId: string
}


=== types\requests\template\ICreateTemplateRequest.ts ===
export interface ICreateTemplateRequest {
  projectId: string
  containerId: string
  name: string
  subject: string
  body: string
}


=== types\requests\template\ICreateVersionRequest.ts ===
export interface ICreateVersionRequest {
  subject: string
  body: string
}


=== types\requests\template\IRemoveVersionFromStageRequest.ts ===
export interface IRemoveVersionFromStageRequest {
  stageId: string
}


=== types\requests\user\ICreateUserRequest.ts ===
import type { GlobalRoleType } from '~/types'

export type ICreateUserRequest = {
  email: string
  ssoId: string
  isActive: boolean
  globalRole: GlobalRoleType
  firstName: string
  lastName: string
}


=== types\requests\user\IUpdateUserRequest.ts ===
import type { GlobalRoleType } from '~/types'

export type IUpdateUserRequest = {
  email: string
  isActive: boolean
  globalRole: GlobalRoleType
  firstName: string
  lastName: string
}


any time you are helping me build code you need to keep in mind that you are acting as the UI Designer as I have no UI/UX experience. Also we want to build code to be as re-usable as possible so small components are preferred. I also have many components already designed like my header and footer. Are you ready to help me build my application?
