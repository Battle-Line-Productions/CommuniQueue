org: battleline
app: battlesites
service: Battleline-Sites-CommuniQueue

provider:
  name: aws
  deploymentMethod: direct
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  deploymentBucket:
    name: battleline-serverless-deployments
  environment:
    NUXT_SITE_ENV: ${self:stages.${self:provider.stage}.seoEnvironment}
    NUXT_SITE_URL: https://${self:stages.${self:provider.stage}.domain}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
            - s3:GetBucketPolicy
            - s3:PutBucketPolicy
          Resource:
            - arn:aws:s3:::${self:custom.ServiceLower}-website-bucket
            - arn:aws:s3:::${self:custom.ServiceLower}-website-bucket/*
        - Effect: Allow
          Action:
            - cloudfront:CreateInvalidation
            - cloudfront:GetDistribution
            - cloudfront:GetDistributionConfig
            - cloudfront:CreateOriginAccessControl
            - cloudfront:GetOriginAccessControl
            - cloudfront:GetOriginAccessControlConfig
          Resource: '*'

custom:
  Service: ${self:service}-${self:provider.region}-${self:provider.stage}
  ServiceLower: battleline-sites-communiqueue-${self:provider.region}-${self:provider.stage}
  accountId: ${aws:accountId}
  s3Sync:
    - bucketName: ${self:custom.ServiceLower}-website-bucket
      localDir: dist
      deleteRemoved: true
      params:
        - '**/*.html':
            CacheControl: 'public, max-age=0, must-revalidate'
        - '**/*.js':
            CacheControl: 'public, max-age=31536000, immutable'
        - '**/*.css':
            CacheControl: 'public, max-age=31536000, immutable'
        - '_nuxt/**':
            CacheControl: 'public, max-age=31536000, immutable'
  cloudfrontInvalidate:
    - distributionIdKey: "CloudFrontDistributionId"
      items:
        - "/*"

stages:
  dev:
    seoEnvironment: dev
    domain: dev.communiqueue.com
    certificateArn: arn:aws:acm:us-east-1:139279799285:certificate/a6adc586-a843-403d-8b00-2f09fb5d21d3
  prod:
    seoEnvironment: production
    domain: communiqueue.com
    certificateArn: arn:aws:acm:us-east-1:139279799285:certificate/10a0a98a-0b83-418f-8bbb-bd2ce96725df

plugins:
  - serverless-s3-sync
  - serverless-cf-invalidate-proxy

resources:
  Outputs:
    CloudFrontDistributionId:
      Value:
        Ref: Distribution
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.ServiceLower}-website-bucket
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action: 's3:GetObject'
              Resource:
                Fn::Sub: 'arn:aws:s3:::${self:custom.ServiceLower}-website-bucket/*'
              Principal:
                Service: 'cloudfront.amazonaws.com'
              Condition:
                StringEquals:
                  'AWS:SourceArn':
                    Fn::Sub: 'arn:aws:cloudfront::${self:custom.accountId}:distribution/${Distribution}'

    OriginAccessControl:
      Type: 'AWS::CloudFront::OriginAccessControl'
      Properties:
        OriginAccessControlConfig:
          Name: ${self:service}-${self:provider.stage}-oac
          Description: OAC for ${self:service}-${self:provider.stage}
          SigningProtocol: sigv4
          SigningBehavior: always
          OriginAccessControlOriginType: s3

    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          HttpVersion: http2and3
          DefaultRootObject: index.html
          Origins:
            - Id: static
              DomainName:
                Fn::Sub: '${Bucket}.s3.${self:provider.region}.amazonaws.com'
              S3OriginConfig: {}
              OriginAccessControlId:
                Ref: OriginAccessControl
          DefaultCacheBehavior:
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD, OPTIONS]
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # SecurityHeadersPolicy
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ErrorCachingMinTTL: 300
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ErrorCachingMinTTL: 300
              ResponsePagePath: /index.html
          PriceClass: PriceClass_100
          Aliases:
            - ${self:stages.${self:provider.stage}.domain}
          ViewerCertificate:
            AcmCertificateArn: ${self:stages.${self:provider.stage}.certificateArn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
